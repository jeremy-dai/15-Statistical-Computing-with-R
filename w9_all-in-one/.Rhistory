my_dgamma <- function(x, alpha, beta) {
out_dens <- beta^alpha * x^(alpha - 1) * exp(-x/beta) / gamma(alpha)
return(out_dens)
}
all.equal(dgamma(X, alpha, beta), my_dgamma(X, alpha, beta))
set.seed(160945)
alpha <- 3; beta <- 1 # true values
n <- 1000
X <- rgamma(n, alpha, beta) # data
my_dgamma <- function(x, alpha, beta) {
out_dens <- beta^alpha * x^(alpha - 1) * exp(-x/beta) / gamma(alpha)
return(out_dens)
}
all.equal(dgamma(X, alpha, beta), my_dgamma(X, alpha, beta))
beta_hat <- mean(X) / var(X)
alpha_hat <- mean(X) * beta_hat
c(shape = alpha_hat, rate = beta_hat)
B <- 1e3; t_pboots <- numeric(B)
for (b in 1:B) {
X_b <- rgamma(n, alpha_hat, beta_hat)
t_pboots[b] <- median(X_b) }
c("E[median]" = mean(t_pboots), "S_median." = sd(t_pboots))
hist(t_pboots)
abline(v=median(X))
hist(t_pboots)
abline(v=median(X))
hist(t_pboots)
abline(v=median(X), col=1)
hist(t_pboots)
abline(v=median(X), col=2)
hist(t_pboots,breaks = "FD", col = "lightblue")
abline(v=median(X), col=2)
abline(v=mean(t_pboots), col='blue')
B <- 1e3; t_pboots <- numeric(B)
for (b in 1:B) {
X_b <- rgamma(n, 3, 1)
t_pboots[b] <- median(X_b) }
c("E[median]" = mean(t_pboots), "S_median." = sd(t_pboots))
hist(t_pboots,breaks = "FD", col = "lightblue")
abline(v=median(X), col=2)
abline(v=mean(t_pboots), col='blue')
read.csv('./data/Advertising.csv')
read.csv('Advertising.csv')
summary(data)
data <- read.csv('Advertising.csv')
summary(data)
View(data)
?read.csv
data <- read.csv('Advertising.csv',index=False)
data <- read.csv('Advertising.csv',quote =False)
data <- read.csv('Advertising.csv',row.names = FALSE)
data <- read.csv('Advertising.csv',row.names = FALSE)
data <- read.csv('Advertising.csv',row.names = NULL)
summary(data)
data <- read.csv('Advertising.csv',row.names = NULL)
summary(data)
lm(Sales ~  TV + Radio + Newspaper, data = data)
summary(lm0)
lm0 <- lm(Sales ~  TV + Radio + Newspaper, data = data)
summary(lm0)
coef(adv_lm)
coef(lm0)
coef(lm0)[1]
adv_lm <- lm(sales ~ . , data = adv_dat)
adv_lm <- lm(sales ~ . , data = data)
data
lm(sales ~ . , data = data)
lm(Sales ~ . , data = data)
fm1 <- lm(Employed ~ ., data = longley)
View(fm1)
longley
fm1$residuals - (longley$Employed - fm1$fitted)
fm1$residuals
(longley$Employed - fm1$fitted)
sample(fm1$residuals, length(fm1$residuals), replace = TRUE)
sample(fm1$residuals, 16, replace = TRUE)
M1 <- model.matrix(fm1)
M1
longley
betas <- coefficients(fm1)
M1 %*% betas
names(longley)
lm(y ~ M1 - 1, data = longley)
alpha <- 3; beta <- 1 # true values
med_mc_approx <- qgamma(0.5, alpha, beta)
med_mc_approx
alpha <- 3; beta <- 1
med_mc_approx <- qgamma(0.5, alpha, beta)
n <- 1000 # sample size
sample(5)
sample(5, replaced = TRUE)
sample(5,5, replaced = TRUE)
sample(5,5, replace = TRUE)
sample(5,replace = TRUE)
lm(Employed ~ ., data = longley)
fm1 <- lm(Employed ~ ., data = longley)
M1 <- model.matrix(fm1)
M1
# all possible combinations of the factors in a data.frame
dat <- data.frame(expand.grid(
sex = factor(0:1, labels=c("male","female")),
treat = factor(0:1, labels= c("active","placebo")),
age = factor(0:1, labels=c("young","old")),
bmi = factor(0:3, labels=c("under","normal","over","obese"))
))
dat
model.matrix(~dat$sex + dat$treat + dat$age + dat$bmi)
model.matrix(dat$sex + dat$treat + dat$age + dat$bmi)
?model.matrix
sigma <- 2
betas <- c(b0 = 10, b1 = -1, b2 = -2, b3 = -1.3,
b4 = .1, b5 = -1, b6 = -1.2)
X <- model.matrix(~dat$sex + dat$treat + dat$age + dat$bmi)
mu.i <- X %*% betas
set.seed(123)
BMI   <- dat[rep(rownames(dat), each = 50), ]
BMI$y <- rnorm(50*32)*sigma + rep(mu.i, each = 50)
rep(mu.i, each = 50)
mu.i
mu.i * 10
c[mu.i] * 10
c(0,1) * 10
rep(0,1)
rep(0,6)
BMI
M1 <- lm(y ~ sex + treat + age + bmi, dat = BMI)
M2 <- lm(y ~ (sex + treat + age + bmi)^2, dat = BMI)
summary(M2)
# function to compute (adjusted) R^2 based on the design
# matrix, the response vector and the estimated
# coefficients
R2 <- function(X, y, betas){
f <- c(X %*% betas)
R2 <- cor(f, y)^2
return(R2)
}
adjR2 <- function(X, y, betas){
R2 <- R2(X,y, betas)
n <- nrow(X)
cnst <- (n - 1)/(n - length(betas))
out <- 1 - (1 - R2)*cnst
return(out)
}
BMI$y
set.seed(321)
y <- BMI$y
n <- length(y)
B <- 100 # how many Bootstrap samples
# to safe time, define bootstrapped indices beforehand:
ind <- matrix(sample(1:n, n*B, replace = TRUE), n, B)
shape(ind )
dim(ind )
ind.i <- ind[, 1]
dim(ind.i)
ind[, 1]
dim(ind.i)
length(ind.i)
ULCN_nrs = 1000001:2499999
length(ULCN_nrs) # 1499999 numbers
table(ULCN_nrs < 1700000) #800000 larger or equal, 699999 smaller
prob_old <- 0.25 / 699999
prob_new <- 0.75 / 800000
probs_ULCN <- c(rep(prob_old,699999),rep(prob_new,800000))
sum(probs_ULCN) # equal to 1
set.seed(20191030)
id_number <- sample(ULCN_nrs,49,prob=probs_ULCN)
ran_ULCNs <- paste0('s',sort(id_number))
df <- read.table('0_data/names.txt',sep=' ',stringsAsFactors=F,
col.names=c('voornaam','achternaam'))
str(df)
key20191030 <- {
set.seed(20191030)
data.frame(
decrypt = c(letters, LETTERS, 0:9, " ", NA, ".", "/", "-"),
encrypt = sample(c(letters, LETTERS, 0:9, " ", NA, ".", "/", "-")),
stringsAsFactors = FALSE
)
}
raw_names <- ```
strsplit('Francina', split = "")
cat(sapply(strsplit('Francina',split = "")[[1]], function(ch) key$encrypt[key$decrypt %in% ch]),sep='')
key= key20191030
cat(sapply(strsplit('Francina',split = "")[[1]], function(ch) key$encrypt[key$decrypt %in% ch]),sep='')
cat(sapply(strsplit('Francina Love',split = "")[[1]], function(ch) key$encrypt[key$decrypt %in% ch]),sep='')
encrypt <- function(vect,key=key20191030){
sec_name <- ''
for (v in vect){
#print(v)
name <- paste0(sapply(strsplit(v,split = "")[[1]], function(ch) key$encrypt[key$decrypt %in% ch]))
#print(name)
sec_name <- c(sec_name,name)
#sec_name<- sapply(vect, function(v) cat(sapply(strsplit(v,split = "")[[1]], function(ch) key$encrypt[key$decrypt %in% ch]),sep=''))
}
return (sec_name)
}
ans <- encrypt(c('Tommy','Francina'),key20191030)
ans
sapply(strsplit('Francina Love',split = "")[[1]], function(ch) key$encrypt[key$decrypt %in% ch])
encrypt <- function(vect,key=key20191030){
sec_name <- ''
for (v in vect){
#print(v)
name <- paste0(sapply(strsplit(v,split = "")[[1]], function(ch) key$encrypt[key$decrypt %in% ch]))
#print(name)
sec_name <- c(sec_name,name)
#sec_name<- sapply(vect, function(v) cat(sapply(strsplit(v,split = "")[[1]], function(ch) key$encrypt[key$decrypt %in% ch]),sep=''))
}
return (sec_name)
}
ans <- encrypt(c('Tommy','Francina'),key20191030)
ans
View(df)
cat(sapply(strsplit('Francina',split = "")[[1]], function(ch) key$encrypt[key$decrypt %in% ch]),sep='')
encrypt <- function(vect,key=key20191030){
sec_name <- ''
for (v in vect){
#print(v)
name <- paste0(sapply(strsplit(v,split = "")[[1]], function(ch) key$encrypt[key$decrypt %in% ch]))
#print(name)
sec_name <- c(sec_name,name)
#sec_name<- sapply(vect, function(v) cat(sapply(strsplit(v,split = "")[[1]], function(ch) key$encrypt[key$decrypt %in% ch]),sep=''))
}
return (sec_name)
}
ans <- encrypt(c('Tommy','Francina'),key20191030)
ans
encrypt <- function(vect,key=key20191030){
sec_name <- ''
for (v in vect){
#print(v)
name <- cat(sapply(strsplit(v,split = "")[[1]], function(ch) key$encrypt[key$decrypt %in% ch]))
#print(name)
sec_name <- c(sec_name,name)
#sec_name<- sapply(vect, function(v) cat(sapply(strsplit(v,split = "")[[1]], function(ch) key$encrypt[key$decrypt %in% ch]),sep=''))
}
return (sec_name)
}
ans <- encrypt(c('Tommy','Francina'),key20191030)
ans
encrypt <- function(vect,key=key20191030){
sec_name <- ''
for (v in vect){
print(v)
name <- cat(sapply(strsplit(v,split = "")[[1]], function(ch) key$encrypt[key$decrypt %in% ch]))
print(name)
sec_name <- c(sec_name,name)
sec_name<- sapply(vect, function(v) cat(sapply(strsplit(v,split = "")[[1]], function(ch) key$encrypt[key$decrypt %in% ch]),sep=''))
}
return (sec_name)
}
ans <- encrypt(c('Tommy','Francina'),key20191030)
encrypt <- function(vect,key=key20191030){
sec_name <- ''
for (v in vect){
print(v)
name <- paste(sapply(strsplit(v,split = "")[[1]], function(ch) key$encrypt[key$decrypt %in% ch]))
print(name)
sec_name <- c(sec_name,name)
sec_name<- sapply(vect, function(v) cat(sapply(strsplit(v,split = "")[[1]], function(ch) key$encrypt[key$decrypt %in% ch]),sep=''))
}
return (sec_name)
}
ans <- encrypt(c('Tommy','Francina'),key20191030)
encrypt <- function(vect,key=key20191030){
sec_name <- ''
for (v in vect){
print(v)
name <- paste(sapply(strsplit(v,split = "")[[1]], function(ch) key$encrypt[key$decrypt %in% ch]))
print(name)
sec_name <- c(sec_name,name)
sec_name<- sapply(vect, function(v) cat(sapply(strsplit(v,split = "")[[1]], function(ch) key$encrypt[key$decrypt %in% ch]),sep=''))
}
return (sec_name)
}
ans <- encrypt(c('Tommy','Francina'),key20191030)
ans
encrypt <- function(vect,key=key20191030){
sec_name <- ''
for (v in vect){
#print(v)
name <- paste(sapply(strsplit(v,split = "")[[1]], function(ch) key$encrypt[key$decrypt %in% ch]))
#print(name)
sec_name <- c(sec_name,name)
#sec_name<- sapply(vect, function(v) cat(sapply(strsplit(v,split = "")[[1]], function(ch) key$encrypt[key$decrypt %in% ch]),sep=''))
}
return (sec_name)
}
ans <- encrypt(c('Tommy','Francina'),key20191030)
ans
encrypt <- function(vect,key=key20191030){
sec_name <- ''
for (v in vect){
#print(v)
name <- cat(sapply(strsplit(v,split = "")[[1]], function(ch) key$encrypt[key$decrypt %in% ch]))
#print(name)
sec_name <- c(sec_name,name)
#sec_name<- sapply(vect, function(v) cat(sapply(strsplit(v,split = "")[[1]], function(ch) key$encrypt[key$decrypt %in% ch]),sep=''))
}
return (sec_name)
}
ans <- encrypt(c('Tommy','Francina'),key20191030)
ans
df_encrypted <- lapply(df,function(n) Surrogate(n,key20191030))
Encrypt <- function(names_decr, key = key20191030) { # names_decr <- student_names$V1
# key <- key20191030
raw_names <- strsplit(names_decr, split = "")
map_to_decr <- 1:nrow(key)
names(map_to_decr) <- key$decrypt
names_encr <- sapply(raw_names, function(decr_name) { # decr_name <- raw_names[[1]]
name_encr <- key$encrypt[map_to_decr[decr_name]] name_encr <- paste(name_encr, collapse = "") return(name_encr)
Encrypt <- function(names_decr, key = key20191030) { # names_decr <- student_names$V1
# key <- key20191030
raw_names <- strsplit(names_decr, split = "")
map_to_decr <- 1:nrow(key)
names(map_to_decr) <- key$decrypt
names_encr <- sapply(raw_names, function(decr_name) { # decr_name <- raw_names[[1]]
name_encr <- key$encrypt[map_to_decr[decr_name]]
name_encr <- paste(name_encr, collapse = "")
return(name_encr)
})
return(names_encr) }
Encrypt(c("Tommy", "Francina"))
getRversion()
strsplit(c('Tommy','Francina'), split = "")
encrypt <- function(vect,key=key20191030){
sec_name <- ''
#print(v)
name <- cat(sapply(strsplit(vect,split = "")[[1]], function(ch) key$encrypt[key$decrypt %in% ch]))
print(name)
sec_name <- c(sec_name,name)
#sec_name<- sapply(vect, function(v) cat(sapply(strsplit(v,split = "")[[1]], function(ch) key$encrypt[key$decrypt %in% ch]),sep=''))
return (sec_name)
}
ans <- encrypt(c('Tommy','Francina'),key20191030)
ans
cat(sapply(strsplit(c('Tommy','Francina'),split = "")[[1]], function(ch) key$encrypt[key$decrypt %in% ch]))
encrypt <- function(vect,key=key20191030){
sec_name <- ''
#print(v)
name <- cat(sapply(strsplit(vect,split = ""), function(ch) key$encrypt[key$decrypt %in% ch]))
print(name)
sec_name <- c(sec_name,name)
#sec_name<- sapply(vect, function(v) cat(sapply(strsplit(v,split = "")[[1]], function(ch) key$encrypt[key$decrypt %in% ch]),sep=''))
return (sec_name)
}
ans <- encrypt(c('Tommy','Francina'),key20191030)
cat(sapply(strsplit(c('Tommy','Francina'),split = ""), function(ch) key$encrypt[key$decrypt %in% ch]))
vect = c('Tommy','Francina')
sapply(strsplit(vect,split = ""), function(ch) key$encrypt[key$decrypt %in% ch])
paste(sapply(strsplit(vect,split = ""), function(ch) key$encrypt[key$decrypt %in% ch]))
encrypt <- function(vect,key=key20191030){
sec_name <- ''
#print(v)
name <- paste(sapply(strsplit(vect,split = ""), function(ch) key$encrypt[key$decrypt %in% ch]),sep='')
print(name)
sec_name <- c(sec_name,name)
#sec_name<- sapply(vect, function(v) cat(sapply(strsplit(v,split = "")[[1]], function(ch) key$encrypt[key$decrypt %in% ch]),sep=''))
return (sec_name)
}
ans <- encrypt(c('Tommy','Francina'),key20191030)
ans
encrypt <- function(vect,key=key20191030){
sec_name <- ''
#print(v)
name <- paste(sapply(strsplit(vect,split = ""), function(ch) key$encrypt[key$decrypt %in% ch]),split='')
print(name)
sec_name <- c(sec_name,name)
#sec_name<- sapply(vect, function(v) cat(sapply(strsplit(v,split = "")[[1]], function(ch) key$encrypt[key$decrypt %in% ch]),sep=''))
return (sec_name)
}
ans <- encrypt(c('Tommy','Francina'),key20191030)
ans
encrypt <- function(vect,key=key20191030){
sec_name <- ''
#print(v)
name <- paste(sapply(strsplit(vect,split = ""), function(ch) key$encrypt[key$decrypt %in% ch]))
print(name)
sec_name <- c(sec_name,name)
#sec_name<- sapply(vect, function(v) cat(sapply(strsplit(v,split = "")[[1]], function(ch) key$encrypt[key$decrypt %in% ch]),sep=''))
return (sec_name)
}
ans <- encrypt(c('Tommy','Francina'),key20191030)
ans
paste(sapply(strsplit(vect,split = ""), function(ch) key$encrypt[key$decrypt %in% ch]))
sapply(strsplit(vect,split = ""), function(ch) key$encrypt[key$decrypt %in% ch])
a = sapply(strsplit(vect,split = ""), function(ch) key$encrypt[key$decrypt %in% ch])
a
paste(a, collapse = "")
sapply(a,function(w) paste(w, collapse = ""))
encrypt <- function(vect,key=key20191030){
sec_name <- ''
#print(v)
name <- sapply(strsplit(vect,split = ""), function(ch) key$encrypt[key$decrypt %in% ch])
print(name)
sec_name <- sapply(name,function(w) paste(w, collapse = ""))
#sec_name<- sapply(vect, function(v) cat(sapply(strsplit(v,split = "")[[1]], function(ch) key$encrypt[key$decrypt %in% ch]),sep=''))
return (sec_name)
}
ans <- encrypt(c('Tommy','Francina'),key20191030)
ans
Encrypt <- function(names_decr, key = key20191030) { # names_decr <- student_names$V1
# key <- key20191030
raw_names <- strsplit(names_decr, split = "")
map_to_decr <- 1:nrow(key)
names(map_to_decr) <- key$decrypt
names_encr <- sapply(raw_names, function(decr_name) { # decr_name <- raw_names[[1]]
name_encr <- key$encrypt[map_to_decr[decr_name]]
name_encr <- paste(name_encr, collapse = "")
return(name_encr)
})
return(names_encr) }
Encrypt(c("Tommy", "Francina"))
