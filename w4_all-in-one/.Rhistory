for(i in 1:n) {
if(i == 1) {
a1[i] <- sample(c(0,1), 1)
}
if(i < n) {
a1[i + 1] <- a1[i] + sample(c(0,1), 1)
}
cat("i = ", i, "and a = ", a[i], "\n")
}
a1
n <- 5;
a1 <- numeric(n)
set.seed(42)
a1[1] <- sample(c(0,1), 1)
a1
i=1
a1[i + 1] <- a1[i] + sample(c(0,1), 1)
a1
a1[i]
cat("i = ", i, "and a = ", a[i], "\n")
i=2
a1[i + 1] <- a1[i] + sample(c(0,1), 1)
a1
cat("i = ", i, "and a = ", a[i], "\n")
n <- 5;
a1 <- numeric(n)
set.seed(42)
for(i in 1:n) {
if(i == 1) {
a1[i] <- sample(c(0,1), 1)
}
if(i < n) {
a1[i + 1] <- a1[i] + sample(c(0,1), 1)
}
cat("i = ", i, "and a = ", a1[i], "\n")
}
a1
system.time(replicate(1e4, {
set.seed(42)
a2 <- sample(c(0,1), 5, replace = TRUE)
a2 <- cumsum(a2)
}))
replicate(1e4, {
set.seed(42)
a2 <- sample(c(0,1), 5, replace = TRUE)
a2 <- cumsum(a2)
}
a2 <- sample(c(0,1), 5, replace = TRUE)
x <- matrix(rnorm(1e6), 1e2, 1e4)
x_sds1 <- numeric(1e3)
for(i in 1:ncol(x)) x_sds1[i] <- mean(x[,i])
x_sds2 <- apply(X = x, MARGIN = 2, mean)
x_sds3 <- colMeans(x)
all.equal(x_sds1, x_sds2, x_sds3)
x
system.time(replicate(10, {
x_sds1 <- numeric(1e3)
for(i in 1:ncol(x)) x_sds1[i] <- mean(x[,i])
}))
system.time(replicate(10, {
x_sds2 <- apply(X = x, MARGIN = 2, mean)
}))
system.time(replicate(10, {
x_sds3 <- colMeans(x)
}))
in_stock <- 99
paragraph <- paste0(
in_stock, " bottles of beer on the wall, ",
in_stock, " bottles of beer. \n",
"Take one down, pass it around, ",
in_stock - 1," bottles of beer on the wall...\n\n"
)
cat(paragraph)
CreateParagraphsBottlesBeer <- function(bttls) { paragraph <- paste0( bttls, " bottles of beer on the wall, ", bttls, " bottles of beer. \n", "Take one down, pass it around, ", bttls - 1, " bottles of beer on the wall...\n\n" ) # cat(paragraph) return(paragraph)
} bttls10to2_lapply <- lapply(10:3, CreateParagraphsBottlesBeer) class(bttls10to2_lapply)
CreateParagraphsBottlesBeer <- function(bttls) { paragraph <- paste0( bttls, " bottles of beer on the wall, ", bttls, " bottles of beer. \n", "Take one down, pass it around, ", bttls - 1, " bottles of beer on the wall...\n\n" ) # cat(paragraph) return(paragraph)
}
bttls10to2_lapply <- lapply(10:3, CreateParagraphsBottlesBeer)
bttls10to2_lapply
bttls10to2_sapply <- sapply(10:3, CreateParagraphsBottlesBeer)
bttls10to2_sapply
class(bttls10to2_sapply)
my_list <- replicate(10, list(rnorm(5)))
my_list
for (i in 1:10) {
my_list[[i]] <- rnorm(5) }
my_list
rm(my_list)
for (i in 1:10) {
my_list[[i]] <- rnorm(5) }
my_list <- vector(length = 10, mode = "list")
my_list
my_list[1]
my_list[[1]
]
?suppressWarnings
?round
apply(1:5, function(x) x+3)
apply(1:5, c(1,2), function(x) x+3)
apply(1:5, 1, function(x) x+3)
apply(1:5, 2, function(x) x+3)
sapply(1:5, function(i) i ) + 3
lapply(1:5, function(i) i +3)
sapply(1:5, function(i) i+3 )
sapply(1:10, function(elem) rnorm(1))
sapply(1:10, function(x) rnorm(1))
sapply(1:10, function(x) rnorm(1,2,3))
y <- sapply(1:100, function(elem) rnorm(1))*3 + 2
y
x
y
x <- y <- NULL for (i in 1:100) { x[i] <- rnorm(1) y[i] <- rnorm(1, 2, 3) }
x <- y <- NULL for (i in 1:100) { x[i] <- rnorm(1) y[i] <- rnorm(1, 2, 3) }
x <- y <- NULL
for (i in 1:100) { x[i] <- rnorm(1) y[i] <- rnorm(1, 2, 3) }
for (i in 1:100) {
x[i] <- rnorm(1)
y[i] <- rnorm(1, 2, 3)
}
x
y
?outer
x <- 1:9; names(x) <- x
y <- 2:8
outer(y, x)
outer(y, x,"^")
bttls <- suppressWarnings(as.integer(bttls))
bttls<5
bttls<-5
bttls <- suppressWarnings(as.integer(bttls))
paragraphs_plural <- paste0( bttls:3, " bottles of beer on the wall, ", bttls:3, " bottles of beer. \n",
25 "Take one down, pass it around, ", (bttls - 1):2, " bottles of beer on the wall...\n\n"
)
paragraphs_plural <- paste0(
bttls:3, " bottles of beer on the wall, ",
bttls:3, " bottles of beer. \n",
"Take one down, pass it around, ",
(bttls - 1):2, " bottles of beer on the wall...\n\n"
)
paragraphs_plural
paragraphs_plural <- paste0(
+ bttls:3, " bottles of beer on the wall, ",
+ bttls:3, " bottles of beer. \n",
+ "Take one down, pass it around, ",
+ (bttls - 1):1, " bottles of beer on the wall...\n\n"
+ )
paragraphs_plural <- paste0(
+ bttls:3, " bottles of beer on the wall, ",
+ bttls:3, " bottles of beer. \n",
+ "Take one down, pass it around, ",
+ (bttls - 1):1, " bottles of beer on the wall...\n\n")
paragraphs_plural <- paste0(
bttls:3, " bottles of beer on the wall, ",
bttls:3, " bottles of beer. \n",
"Take one down, pass it around, ",
(bttls - 1):1, " bottles of beer on the wall...\n\n")
paragraphs_plural
rm(ls())
rm(list = ls())
functs <- ls(envir = as.environment("package:stats"))
functs
sapply(functs, function(i) class(get(i))
)
get(1)
get(var)
get(lag)
class(get(lag()))
x <- 1:5
get("x")
get("var")
stat.mat
stat.args <- sort(unique(names(unlist(lapply(functs, formals)))))
index.to.keep <- which(sapply(functs, function(i) class(get(i))) == "function")
functs <- functs[index.to.keep]
functs
stat.args <- sort(unique(names(unlist(lapply(functs, formals)))))
stat.args
stat.mat <- matrix(F, ncol = length(stat.args), nrow = length(functs))
stat.mat
for (i in 1:length(functs)) {
stat.mat[i, ] <- stat.args %in% names(formals(functs[i])) }
stat.mat
stat.fncts <- data.frame( fnames = functs, stat.mat )
stat.fncts
colnames(stat.fncts) <- c("fnames", stat.args)
stat.fncts
x <- as.numeric(stat.mat[0
])
x
stat.mat[0]
stat.mat[1]
stat.mat[2]
stat.mat
shape(stat.mat)
dim(stat.mat)
stat.mat[0,]
stat.mat[1,]
stat.mat[2,]
x <- as.numeric(stat.mat[1,])
x
x <- as.numeric(stat.mat[1,])
paste(x, collapse = "")
table(to01)
to01 <- apply(X = stat.mat, MARGIN = 1, FUN = function(x){ x <- as.numeric(x) paste(x, collapse = "") })
to01 <- apply(X = stat.mat, MARGIN = 1,
FUN = function(x){ x <- as.numeric(x)
paste(x, collapse = "") })
to01
table(to01)
which.max(table(to01))
names(which.max(table(to01)))
names(which.max(table(to01))) == to01
which.max(table(to01))
to01
names(which.max(table(to01))) == to01
idx <- names(which.max(table(to01))) == to01
sum(indx)
sum(idx)
table(to01)
factor((to01))
library(plyr)
count(to01)
count(to01).sort(
)
sort(cuont(to01))
sort(count(to01))
class(cuont(to01))
class(count(to01))
max(table(to01))
hospitals <- read.spss("hospitals.SAV", use.value.labels = FALSE, to.data.frame = TRUE)
library(foreign)
hospitals <- read.spss("hospitals.SAV", use.value.labels = FALSE, to.data.frame = TRUE)
hospitals <- read.spss("\hospitals.SAV", use.value.labels = FALSE, to.data.frame = TRUE)
hospitals <- read.spss("hospitals.SAV", use.value.labels = FALSE, to.data.frame = TRUE)
hospitals <- read.spss("/hospitals.SAV", use.value.labels = FALSE, to.data.frame = TRUE)
pwd
pwd()
getwd
getwd()
library(foreign)
hospitals <- read.spss("hospitals.SAV", use.value.labels = FALSE, to.data.frame = TRUE)
getwd()
getwd()
setwd('/Users/jeremydai/Google\ Drive/11\ Statistics\ \&\ Probability/Statistics/Exercise/'⁩)
setwd('/Users/jeremydai/Google\ Drive/11\ Statistics\ \&\ Probability/Statistics/Exercise'⁩)
getwd()
setwd('/Users/jeremydai/Google Drive/11 Statistics & Probability/Statistics/Exercise'⁩)
setwd('/Users/jeremydai/Google Drive/11 Statistics & Probability/Statistics/Exercise')
getwd()
hospitals <- read.spss("hospitals.SAV", use.value.labels = FALSE, to.data.frame = TRUE)
View(hospitals)
s <- sample(hospitals, 50)
dim(hospitals)
s <- sample(hospitals, 50)
length(hospitals)
length(hospitals[，1])
length(hospitals[,1])
s <- hospitals(sample(length(hospitals[,1]), 50)
dim(hospitals)
s <- hospitals(sample(length(hospitals[,1]), 50))
s <- hospitals[sample(length(hospitals[,1]), 50)]
s <- hospitals[sample(length(hospitals[,1]), 50),]
s
mean(s)
mean(s[:,1])
mean(s[,1])
mean(s[,2])
var_discharges <- var(s[,1])
u_discharges <- mean(s[,1])
n <- 50
Sx_bar <- sqrt(var_discharges/n)
N <-length(hospitals[,1])
N <-length(hospitals[,1])
n
N
s <- hospitals[sample(N, n),]
var_discharges_population <- var(hospitals[,1])*(N-1)/N
u_discharges_population <- mean(hospitals[,1])
getwd()
for (i in 1:3) for (j in 1:3) print(c(i, j))
A <- M <- V <- NULL
for (i in 1:3) for (j in 1:3) {
A <- rbind(A, c(i, j))
M <- rbind(M, mean(c(i, j)))
V <- rbind(V, var(c(i, j))) }
A
M
V
library(foreign)
hospitals <- read.spss("hospitals.SAV", use.value.labels = FALSE, to.data.frame = TRUE)
hospitals
> hist(hospitals$vdischarges0, breaks = seq(from = 0, to = 3000,
+     by = 200), xlab = "Number of discharges", ylab = "Count",
+ main = "")
hist(hospitals$vdischarges0, breaks = seq(from = 0, to = 3000,by = 200), xlab = "Number of discharges", ylab = "Count")
mean(hospitals$vdischarges0)
var(hospitals$vdischarges0) * (nrow(hospitals)-1)/nrow(hospitals)
N <-nrow(hospitals)
N
N <- nrow(hospitals)
var(hospitals$vdischarges0) * (N-1)/N
for (i in 6:9) for (j in 6:9) print(c(c(i,j),mean(c(i,j))))
for (i in 6:9) for (j in 6:9) {
A <- rbind(A, c(i, j))
M <- rbind(M, mean(c(i, j))) }
M
A <- M <- NULL
for (i in 6:9) for (j in 6:9) {
A <- rbind(A, c(i, j))
M <- rbind(M, mean(c(i, j))) }
m
M
sum(M<7)/len(M)
sum(M<7)/length(M)
qnorm(0.15, lower.tail = FALSE)
qnorm(0.15, lower.tail = TRUE)
library(combinat)
install.packages(combinat)
hospitals
p <- sum(p$vdischarges0<1000)/N
p <- sum(hospitals$vdischarges0<1000)/N
p_bar <- sum(s$vdischarges0<1000)/n
var_p_bar <- sqrt(p_bar*(1-p_bar)/n)
var_p_bar <- p_bar*(1-p_bar)/n
var_p_bar
var_p_bar <- p_bar*(1-p_bar)/n*(N-n)*(N-1)
var_p_bar
var_p_bar <- p_bar*(1-p_bar)/n*(N-n)/(N-1)
var_p_bar
rbinom(n,size=1,p)
rnorm(10)
n<- 50
normal <- rbinom(n,size=1, 0.6)
n<- 50
bino <- rbinom(n,size=1, 0.6)
hist(bino)
n<- 100
bino <- rbinom(n,size=1, 0.6)
hist(bino)
n<- 1000
bino <- rbinom(n,size=1, 0.6)
hist(bino)
n<- 100
bino <- rbinom(n,size=1, 0.6)
p <- sum(bino>40 and bino<60)
n<- 100
bino <- rbinom(n,size=1, 0.6)
p <- sum(bino>40 & bino<60)
p
n<- 100
bino <- rbinom(n,size=100, 0.6)
bino
p <-sum((bino)>40 & bino<60)
p
p <-sum((bino)>40 & bino<60)/100
n<- 100
bino <- rbinom(n,size=100, 0.6)
p <-sum((bino)>40 & bino<60)/100
p
rbinom(1,5, 0.5)
rbinom(10,5, 0.5)
rbinom(10,1, 0.5)
n<- 1000
bino <- rbinom(n,size=5, 0.6)
hist(bino)
n<- 100
bino <- rbinom(n,size=100, 0.6)
p <-sum((bino)>40 & bino<60)/100
p
n<- 1000
bino <- rbinom(n,size=100, 0.6)
p <-sum((bino)>40 & bino<60)/100
p
n<- 1000
bino <- rbinom(n,size=100, 0.6)
bino
p <-sum((bino)>40 & bino<60)/n
p
Exercise 4
n<- 1000
bino <- rbinom(n,size=1700, 0.6)
p <-sum((bino)>1060)/n
p
p
bino
bino <- rbinom(n,size=1, 0.6)
bino
n<- 1000
p=0.6
bino <- rbinom(n,size=1, p)
sn<-sum(bino)
(sn-n*p)/(n*p*(1-p))
bino <- rbinom(n,size=50, p)
bino
(bino-n*p)/(n*p*(1-p))
z <- (bino-n*p)/(n*p*(1-p))
hist(z)
n<- 50
p=0.6
bino <- rbinom(1000,size=n, p)
sn<-sum(bino)
z <- (bino-n*p)/(n*p*(1-p))
hist(z)
rexp(n,1/mu)
mu <- 10
n<-50
rexp(n,1/mu)
hist(rexp(n,1/mu))
hist(rexp(n,1/mu)/n)
mu <- 10
n<-500
hist(rexp(n,1/mu)/n)
mu <- 10
n<-5000
hist(rexp(n,1/mu)/n)
rexp(n,1/mu)
sum(rexp(n,1/mu))/n
mu <- 10
n<-5000
M <- NULL
for (i in 1:50) {
x_bar <- sum(rexp(n,1/mu))/n
M.append(x_bar)
}
mu <- 10
n<-5000
M <- NULL
for (i in 1:50) {
x_bar <- sum(rexp(n,1/mu))/n
append(M,x_bar)
}
hist(results)
hist(M)
M
mu <- 10
n<-5000
M <- []
for (i in 1:50) {
x_bar <- sum(rexp(n,1/mu))/n
append(M,x_bar)
}
hist(M)
M <- numeric(50)
M
mu <- 10
n<-5000
M <- numeric(50)
for (i in 1:50) {
x_bar <- sum(rexp(n,1/mu))/n
M[i]<-x_bar)
}
hist(M)
mu <- 10
n<-5000
M <- numeric(50)
for (i in 1:50) {
x_bar <- sum(rexp(n,1/mu))/n
M[i]<-x_bar)
}
mu <- 10
n<-50
M <- numeric(50)
for (i in 1:50) {
x_bar <- sum(rexp(n,1/mu))/n
M[i] <- x_bar)}
mu <- 10
n<-50
M <- numeric(50)
for (i in 1:50) {
x_bar <- sum(rexp(n,1/mu))/n
M[i] <- x_bar}
hist(M)
n<-500
M <- numeric(50)
for (i in 1:50) {
x_bar <- sum(rexp(n,1/mu))/n
M[i] <- x_bar}
hist(M)
rslt1e <- sapply(y, function(y_elem) {
3*x - 2*y_elem ^ 2 }
)
rslt1e <- matrix(0, 100, 100)
sapply(y, function(y_elem) {3*x - 2*y_elem ^ 2 })
sapply(rslt1e, function(y_elem) {3*x - 2*y_elem ^ 2 })
x <- y <- numeric(100)
rslt1e <- sapply(y, function(y_elem) { 3*x - 2*y_elem ^ 2 } )
rslt1e
x <- y <- NULL
for (i in 1:100) {
x[i] <- rnorm(1)
y[i] <- rnorm(1, 2, 3) }
rslt1e <- sapply(y, function(y_elem) { 3*x - 2*y_elem ^ 2 } )
rslt1e
functs <- ls(envir = as.environment("package:stats"))
functs
index.to.keep <- sapply(functs, function(i) class(get(i))) == "function")
index.to.keep <- sapply(functs, function(i) class(get(i))) == "function"
index.to.keep
functs <- functs[index.to.keep]
functs
functs <- ls(envir = as.environment("package:stats"))
index.to.keep <- which(sapply(functs, function(i) class(get(i))) == "function")
functs <- functs[index.to.keep]
functs
stat.args <- sort(unique(names(unlist(lapply(functs, formals))))
)
stat.args
unlist(lapply(functs, formals))
names(unlist(lapply(functs, formals)))
unlist(lapply(functs, formals))[1]
unlist(lapply(functs, formals))[1:10]
class(unlist(lapply(functs, formals)))
