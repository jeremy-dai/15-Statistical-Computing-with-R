{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Exercises\"\nsubtitle: \"SCR week 5\"\noutput: \n    pdf_document:\n      keep_tex: yes\n      fig_caption: yes\nheader-includes: \n- \\usepackage{graphicx}\n- \\usepackage{float}\n- \\usepackage{placeins}\n---\n\n\n# Exercises part 1\n\n## 1.1. Density plots\n\nRead paragraph 12.1.4 of the book of Norman, pp. 264 - 265. In this exercise you will create the graph shown on page 265, but using a different dataset, called \"tobit.csv\" (see `0_data/tobit.csv`). This data set contains test scores of 200 children. The variables you will use in this exercise are called `read` and `math`.\n\n### a\nRead in the `tobit` dataset.\n```{r}\ntestscores <- read.csv(\"0_data/tobit.csv\")\n```\n\n\n\n### b\nInspect the data set by using a few `R` functions that explore the structure of the data, or can give a summary of the data.\n```{r}\nstr(testscores)\nsummary(testscores)\n```\n\n\n### c \nLike in chapter 12.1.4 of Matloff, use `density()` to get two seperate nonparametric density estimates of the `read` and `math` scores. Make sure you set the `from` and `to` arguments correctly. Use the information you got from **b** to set these. E.g.: if scores run, say from 28 to 76, you might want to have the density run from 20 to 84.\n```{r}\nd_read <- density(testscores$read, from = 20, to = 84, bw = \"SJ\")\nd_math <- density(testscores$math, from = 20, to = 84, bw = \"SJ\")\n```\n\n\n### d \n\nPut both densities into a single plot, make sure you give the different density estimates a different colour. Any interesting differences?\n```{r}\nplot(d_read, main='', xlab='', col='pink')\npar(new=TRUE)\nplot(d_math,main='', xlab='')\n```\n\n\n\n## 1.2 Adding text to a graph with help of the `locator()` function\n\n### a\nWe are going to add text to the graph created in the previous exercise. Read par. 12.1.8 and 12.1.9 of the book of Matloff, pp. 270 - 271. Instead of the text \"Exam 1\" and \"Exam 2\", we use now `read` and `math` from the `tobit` data used in the previous exercise. To determine the coordinates of the text, use the function `locator()`. In your console, type `locator(2)` and use enter. Then, go to the graph you created in Exercise 2 and click on the two points in the graph where you want to put the text. Use these coordinates in the function `text()`.\n```{r}\nplot(d_read, main = \"\", xlab = \"\") \nlines(d_math, col = 'red') \n#locator(2)\ntext(40.5, 0.038, \"read\") \ntext(61.9, 0.034, \"math\")\n```\n\n\n\n### b\n\nChange the size of the text by varying the `cex` parameter (See also par. 12.2.1 on p. 272 of the book of Matloff).\n```{r}\nplot(d_read, main = \"\", xlab = \"\") \nlines(d_math, col = 'red') \ntext(40.5, 0.038, \"read\", cex=1.2) \ntext(61.9, 0.034, \"math\")\n```\n\n\n### c \nAdd a legend to the plot using `legend()`. Put it in the topright corner of the plot.\n```{r}\nplot(d_read, main = \"\", xlab = \"\") \nlines(d_math, col = 'red') \ntext(40.5, 0.038, \"read\", cex=1.2) \ntext(61.9, 0.034, \"math\")\nlegend(x=\"topright\",legend = c(\"dens read\", \"dens math\"), lty = 2, cex= 0.5,col = c('black', 'red'))\n```\n\n## 1.3 Adding points to a graph and customizing a graph\n\nLet's start from scratch!\n\n### a\nWe are going to add points to an existing, but empty, graph with the function `points()`. Look at the following code. Take special care to try to see what the second line does. Play around with some of the arguments if you're not sure what's going on.\n\n```{r}\nset.seed(99)\nplot(-4:4, -4:4, type = \"n\")  # setting up coord. system\npoints(rnorm(200), rnorm(200), col = \"red\")\npoints(rnorm(100)/2, rnorm(100)/2, col = \"blue\", cex =1.5)\n```\n\n### b\nChange the symbol of the points used in the graph created in **a**, to a `+`, by adapting the parameter `pch` (see e.g. the helpfile of `points`).\n```{r}\nset.seed(99)\nplot(-4:4, -4:4, type = \"n\")  # setting up coord. system\npoints(rnorm(200), rnorm(200), col = \"red\", pch = '+')\npoints(rnorm(100)/2, rnorm(100)/2, col = \"blue\", pch = '.')\n```\n\n\n### c\nChange the color of the points, by adapting the parameter `col`. Use `colors()` to inspect which colors are available in `R`. Go nuts with colours by using e.g. `rainbow()`.\n\n\n### d\n\nChange the range of the x-axis and y-axis (using `xlim` and `ylim`; see also paragraph 12.2.2, p. 273 of Matloff).\n\n\n### e\n\nChange the labels of the x-axis and y-axis (using `xlab` and `ylab`) and create a title above the plot (using `main`).\n\n\n## 1.4 Plotting the chi-square density function\n\n### a\n\nCreate a graph of the chi-square density function with $df = 10$ (df = degrees of freedom). Make sure that you set the limits of your y-axis to 0 and 0.30 and the limits of the x-axis to 0 and 32.5.\n```{r}\nx =seq(1,32.5, by=0.5)\nplot(x,dchisq(x,df=10),type = \"l\", xlab = \"x value\", ylab = \"Density\", ylim = c(0, 0.30), xlim = c(0, 32.5),\nmain = \"chi-square distribution\"  )\n```\n\n\n\n### b\n\nUse the function `lines()` to add more chi-square distributions, differing in number of degrees of freedom, to the graph created in a. Use $df = 1$, $df = 3$ and $df = 5$. Add a suitable legend to the graph. Think about the limits we made you set in **a**, why do you think we suggested these limits?\n```{r}\nx =seq(1,32.5, by=0.5)\nplot(x,dchisq(x,df=10),type = \"l\", xlab = \"x value\", ylab = \"Density\", ylim = c(0, 0.30), xlim = c(0, 32.5),\nmain = \"chi-square distribution\"  )\npoints(x,dchisq(x,df=5),type = \"l\", col = \"red\" )\npoints(x,dchisq(x,df=3),type = \"l\", col = \"green\" )\n```\n\n\n### c \n\nLook at the helpfile of the function `curve`. See if you can produce the plot in the previous exercise, using the `curve` function.\n```{r}\nplot(NULL, type = \"l\",\nxlab = \"x value\", ylab = \"Density\", ylim = c(0, 0.30), xlim = c(0, 32.5), main = \"chi-square distribution\"\n)\ndegf <- c(1, 3, 5, 10)\ncolors <- c(\"red\", \"blue\", \"darkgreen\", \"black\") \nlabels <- c(\"df = 1\", \"df = 3\", \"df = 5\", \"df = 10\")\n\nfor (i in 1:length(degf)) {\ncurve(dchisq(x,df=degf[i]),from =1, to = 30, n =100,col = colors[i], add= TRUE)\n\n}\nlegend(\"topright\", inset = .05, labels, lty = rep(1, 4), col = colors)\n```\n\n\n\n### d\n\nSample a 1000 random values from a chisquare distribution with degrees of freedom equal to 3. Plot the results using a histogram. Use the code you've written in **b** (and/or **c**) to add the theoritical density lines to the histogram. Which theoretical density best matches the empirical distribution given by the histogram?\n\n```{r}\nplot(NULL, type = \"l\",\nxlab = \"x value\", ylab = \"Density\", ylim = c(0, 0.30), xlim = c(0, 32.5), main = \"chi-square distribution\"\n)\ndegf <- c(1, 3, 5, 10)\ncolors <- c(\"red\", \"blue\", \"darkgreen\", \"black\") \nlabels <- c(\"df = 1\", \"df = 3\", \"df = 5\", \"df = 10\")\n\nfor (i in 1:length(degf)) {\ncurve(dchisq(x,df=degf[i]),from =1, to = 30, n =100,col = colors[i], add= TRUE)\n\n}\n\npar(new=TRUE)\n\nhist(rchisq(50000,df=3),breaks = \"fd\", freq = FALSE,  axes = FALSE, main='', xlab='', ylab='')\nlegend(\"topright\", inset = .05, labels, lty = rep(1, 4), col = colors)\n```\n\n\n## 1.5 Plotting some categorical data\n\nSuppose we have the following variable: \n```{r}\nobserved_haircolours <- c(\"blonde\" =  10, \"brown\" = 14, \"black\" = 3, \"red\" = 2)\n```\nwhere each entry represents the number of times the specified haircolours were observed in a sample of 29 people.\n\n### a\nUse `plot` to plot the observed haircolours. Is this plot any good?\n```{r}\nplot(observed_haircolours)\n```\n\n\n\n### b\nNow use `barplot` and `pie`. Are these any better?\n```{r}\nbarplot(observed_haircolours)\npie(observed_haircolours)\n```\n\n\n\n\n### c\nConvert the variable `observed_haircolours` to a table (recall e.g. the `as.numeric` function).\n```{r}\n\n```\n\n\n### d\nUse `plot` on this object. What do you think of this plot?\n\n\n### e\nUse `barplot` and `pie` again, this time on your variable that's a table. Are they different from the ones you made in **b**?\n\n\n### f\nTurn the variable `observed_haircolours` into a factor. Make a plot of this new variable. What type of plot is it? Do you think this plot has anything interesting to say?\n\n\n### g\nUse `rep` to create a `factor` variable that contains the entries `blonde`, `brown`, `black` and `red`, as many times as given in `observed_haircolours`. \n\n\n### h\nUse `plot` on this `factor`. Is this any better than in **f**?\n\n\n## 1.6 Some static plots\n\nA group of 1000 people was taken in for some testing. Half are males, and the other half are females. In a moment read the example observed variables a bit further down this exercise. Convert these examples to data in `R` . Match each of the examples to one of the plot types given, and produce the corresponding plot.\n\n1. They voted on whether they'd prefer tea or coffee. It is not quite clear how many of the 150 people actually voted, but of those who voted, 32% voted in favor of coffee, 45% voted in favour of tea, and fa23% voted neutral.\n2. We also measured their heights. The results are (randomly) normally distributed values with, for men, a mean of 185 cm's, and a standard deviation of 5 cm's. The heights of females are normally distributed with mean 175 and standard deviation 3.\n3. Each was asked to roll a 6 sided die. The aggregated results are: 165 times 1, 158 times 2, 178 times 3, 156 times 4, 173 times 5, 170 times 6.\n4. We also measured IQ scores of all the participants. The scores are normally distributed with mean 100, and sd 15. We are looking for outliers!\n\na. histogram\nb. pie chart\nc. boxplot (with only 1 box)\nd. barchart\n\nCreate a nice title for each of the plots and make sure you give any categories nice labels. Choose a different colour yourself for each of the plots. Make sure to play with the `breaks` argument of the histogram function to make sure that your visualization is accurate.\n\n\n## 1.7 Formula Boxplot\nWe've seen that `plot` has several methods. The same is true for `boxplot`. We'll explore a convenient method in this exercise.\n\n### a.\nCreate a factor called `animal` and sample, with equal probability, 1000 samples from the following 5 categories: `c(\"ant\", \"cat\", \"dog\", \"giraffe\", \"elephant\")`.\n```{r}\nfactor(sample(c(\"ant\", \"cat\", \"dog\", \"giraffe\", \"elephant\"),1000, replace=TRUE))\n#,levels=c(\"ant\", \"cat\", \"dog\", \"giraffe\", \"elephant\")\n```\n\n\n### b.\nUse your favorite search engine to look up the average weights of these animals. Create a variable called `weight`, with as many entries as sampled animals. Use a `for` loop (or an `*apply` function) and some `if` statements to fill `weight` with normally distributed values, with parameters depending on the type of animal. Use as mean for each of the distributions the average weight of the animals, and use as standard deviation 10% of the average body weight.\n\n\n### c\nMake a boxplot of `weights`. Is there anything strange about this boxplot?\n\n### d\nOf course this boxplot is not very nice, as we've basically created a boxplot of a multimodal distribution: the average weights depends on the animal. It would therefore be nicer to look at the weights for each of the animals seperately. Use `boxplot` with a `formula`, where you tell `R` that weight depends on the type of animal. Is this better?\n\n\n\\newpage \n\n# Exercises part 2\n\n## 2.1 Making our own qqchisq plot\n\nAs discussed during the lecture, a QQ-plot compares (estimates of) empericial quantiles with theoretical quantiles. In this exercise we will make our own QQ-plot function.\n\nTake the following random variable `x` as an example.\n```{r}\nset.seed(20171004)\nx <- rchisq(500, df = 3)\n```\n\n### a\n\nSort `x` and assign it to `x` again.\n```{r}\nx=sort(x)\n```\n\n\n\n### b\nProduce a vector, called `t_probs`, of length $N$, where $N$ is the number of observations in $X$, with a sequence from $0.5/N$ to $(N-0.5)/N$ with a stepsize of $1/N$.\n```{r}\nN = length(x)\nt_probs = seq(0.5/N,(N-0.5)/N,by=1/N)\n```\n\n\n\n### c\nTurn `t_probs` into values such that the cumulative probabilities correspond with quantiles of a chisquare distribution with degrees of freedom equal to $3$.\n```{r}\nquantiles = qchisq(t_probs, df=3)\n```\n\n\n\n### d\nPlot the observed values `x` against the theoretical quantiles obtained in **c**. Draw a line with unit slope and no intercept. Would you say, from this plot, that the data is distributed similarly to the theoritical distribution we considered?\n\n```{r}\nplot(quantiles, x)\nabline(a = 0, b = 1, col = 'red')\n```\n\n\n### e\nLook at the helpfile of `qqplot` and create a QQ-plot for a chisquare distribution using the code from the example. Are there any differences betweem the plot we made, and the plot of the example (besides aesthetical stuff, such as a plot title)?\n```{r}\nqqplot(x,qchisq(ppoints(500), df = 3))\nqqline(x, distribution = function(p) qchisq(p, df = 3),\nprob = c(0.1, 0.6), col = 2)\n```\n\n\n## Outro\n\nYou may have noticed in **e** that `R` has a different convention when it comes to drawing a `qqline`. It draws a line that passes through the 0.25th, and 0.75th quartiles. This is a more robust way of drawing the line, without need to rescale the line in case of data that looks slightly different. For example redraw values for `x` using:\n\n```{r}\nset.seed(20171004)\nx <- rchisq(500, df = 3) + 3\n```\n\nand go through your plotting procedures again. Do you see that the line is shifted, compared to the data? This is usually 'easily' fixed, but a more simple way is to just simply draw the `qqline` always through the 0.25th and 0.75th quartiles. (In this course, both styles are fine! Just be aware of it!)\n\n\n## 2.2 Looking into sampling distributions\n\nIn this exercise we will take a closer look at sampling distributions, and the relationship between the variance of a sample, and the variance of a sample mean. The relation is given by: $var(\\bar{X}) = \\frac{var(X)}{N}$.\n\nFor some extra info/recap view, for example, the first part of this [video](https://www.youtube.com/watch?v=q50GpTdFYyI) (until 4:12). You may also want to take a look at: http://onlinestatbook.com/2/estimation/mean.html.\n\n### a\nGenerate many samples, e.g 734, of size $100$ ($N = 100$) where each sample is i.i.d. according to a normal distribution with $\\mu = 2$ and $\\sigma = 3$. Repeat this for samples with $N = 10$ and $N = 1000$. Take `set.seed(1212)`. Show in R, with computations on the generated samples, that the relation between sample variance and sample mean variance holds. Think for a second about the strenght of your evidence upon which you base your conclusions.\n```{r}\nset.seed(1212) \nB <- 734\nN <- 10\nN10 <- replicate(B, mean(rnorm(N, mean = 2, sd = 3)))\nN <- 100\nN100 <- replicate(B, mean(rnorm(N, mean = 2, sd = 3)))\nN <- 1000\nN1000 <- replicate(B, mean(rnorm(N, mean = 2, sd = 3)))\n```\n\n\n\n### b \nInstead of expression the relationship in numbers (as in one of the previous exercises), we now want to express it using some visualization. Do this in the following two ways:\n\na) by visualizing the sampling distributions of the mean for the samples with the three different sample sizes generated for question 1 (you may show three separate plots)\n```{r}\nhist(N10)\n```\n\nb) by computing the 95$\\%$ confidence intervals of the mean for three samples picked from the samples you generated for question 1 (i.e., one sample with $N = 10$, one with $N = 100$ and one with $N = 1000$). Assume in the computation of the confidence interval, that you do not know $\\sigma$, thus you have to use the sample estimate of it ($s$). Furthermore, make use of the $t$-distribution for choosing the values of $t$ to be used in a confidence interval. In R, you can obtain these $t$-values using the function `qt()`. For example, the values for a sample size of $n = 5$ are obtained by `qt(c(.025, .975), df = 4)`.\n\n\n### c\nWrite a function in `R` that computes the mean and its 95$\\%$ confidence interval of a variable. The input argument of the function is a vector that can have different lengths. The output is a list with two components: the mean, and the 95$\\%$ confidence interval.\n\n\n## 2.3 Contour: visualizing a pyramid\n\nIn this exercise we'll visualize a pyramid, using a 2D plot. Of course you all know what a pyramid looks like, but if you're unsure, go to the library and look in some history textbooks. Hopefully, using such a simple shape will give you some insight in how to read a `contour`plot, and how to create one.\n\n### a\nCreate a 15 by 15 matrix. Fill the outer ring of values with a 1, fill the second ring from outside with a 2, etc. These value indicate the 'height' of the pyramid at that point.\n\nHere's some cody to create a 5 by 5 matrix as an example:\n```{r}\nnrow <- 15\nncol <- 15\npyramid <- matrix(0, nrow=nrow, ncol=ncol)\nfor (i in 1:nrow){\n  for (j in 1:ncol){\n    pyramid[i, j] <- min(i, nrow-i+1,j, ncol-j+1)\n  }\n}\n\n# look at the contents:\npyramid\n```\n\n\n### b\nUse `contour` to visualize the pyramid.What is used to represent the height of the pyramid at each point?\n```{r}\nx <- y <- 1:15\n\ncontour(x,y,pyramid[x,y],nlevels=length(unique(c(pyramid))))\n```\n\n\n### c\nUse `image` to visualize the pyramid. What is used to represent the height of the pyramid at each point?\n\n\n## 2.4 Make a heat map and save the plot as `.pdf`\n\nTake a look at the following link: [heatmap](http://flowingdata.com/2010/01/21/how-to-make-a-heatmap-a-quick-and-easy-solution/). Follow the coding instructions on the website. You can find the data (`ppg2008.csv`) on the website, or in the `data` folder. Save the final heatmap as a `.pdf` file.\n```{r}\nnba <- read.csv(\"http://datasets.flowingdata.com/ppg2008.csv\", sep=\",\")\n```\n\n\n\\newpage \n\n# 3 Self-study\n\n\n## 3.1 Visualizing a bivariate normal density\nBefore you start this exercise, install the package `mvtnorm`.\n\n### a\nTake a look at `dmvnorm` in the `mvtnorm` package. To calculate the density function of a bivariate normal distribution, you will need the covariance matrix of the distribution. Create one, where both marginal distributions are standard normally distributed, and are correlated with a coefficient of 0.7.\n```{r}\nsigma_cor <- matrix(c(1, 0.7, 0.7, 1), ncol=2)\n```\n\n\n### b\nTake a look at `expand.grid`. Use it to create quantiles, so you can evaluate the bivariate normal density at many points. For example at `x1 = -3`, and `x2 = 0`, or `x1 = -3`, and `x2 = 1`, etc. You will need many points (e.g. many combinations of values of `x1` and `x2`) to get a nice picture of the density.\n\n### c.\nPut the quantiles you've created into `dmvnorm` twice, once with all the defaults, and once also providing the covariance matrix you created in **a**. Save the results of both operations. \n\n\n### d.\nIf we want to use `contour`, we need to put the density values into a matrix. The entries in this matrix represent a grid, with density evaluations at the intersections of the gridlines. An important issue is that we need to make sure the ordering of the values is correct: e.g. the value in the second row, and third column (where grid lines for row two and column three meet), needs to be the value of evaluating the second quantile for the first normal variable and the third quantile for the second normal variable.\n\nConvert the quantiles you've created into such a matrix now.\n\n### e.\nYou now have all the ingredients you need for `contour`. Make a contourplot of both bivariate normal distributions. Do they look the same? What's the big difference?\n\n\n## 3.2 Hexbin\n\n**we commented most of the plotting code as it takes forever to plot and to show the plots in the pdf file, so uncomment or copy the code if you want to check your answers!**\n\n### a\nRead in the file `mystery.txt`. NB: it's a very big file, so this might take a few seconds (the same goes for all the plotting you do during this exercise).\n\n\n### b\nUse some summary statistics functions on the data in the mystery file. Make for example a histogram of `x` and `y`. Do you see anything interesting?\n\n### c\nThe univariate stuff was boring. Let's now look at some bivariate stuff. Are `x` and `y` correlated? Does a simple `plot` of the entries show anything interesting?\n\n### d\nInstead of `plot`, use `plot(hexbin())` from the `hexbin` library. Play around with the argument `xbins`. Do you see something interesting?\n\n\n### e\nAlso try `smoothScatter`, you may want to play around with the `bandwith` and the `nbin` arguments. Do you prefer `hexbin` or `smoothScatter`?\n\n```{r}\n# smoothScatter(my_mystery, bandwidth = 0.001, nbin=1000)\n```\n`smoothScatter` requires an extra argument we need to 'tune', it does provide more 'smooth' plots though: the `hexbin` plot is, by definition, a collection of hexagons, while `smoothScatter` can take on more 'fluid' shapes.\n\n\n## 3.4 Sampling from a triangle\n\nDuring the lecture we've talked about how the cumulative distribution function can be employed to produce random numbers from that distribution. Look at the following density function:\n\n* $4x$, for $x\\in [0, 0.5)$\n* $4(1-x)$ for $x\\in [0.5, 1]$\n\nSee an implementation below.\n\n```{r}\ndtriangle <- function(x){\n  (x >= 0 & x < 0.5) * 4 * x + (x >= 0.5 & x <= 1) * 4 * (1 - x)\n}\ncurve(dtriangle, asp = 1, from = -0.5, to = 1.5)\n```\n\n### a\nIntegrate the density of the triangle over its domain with `integrate()`, is it a proper density function?\n\n\n### b\n\nFormulate a cumulative distribution function and write a function called `ptriangle` that implements this. Note that besides integrating the density function, you may also need to choose a proper constant, such that the minimum of the function is $0$, and the maximum is $1$.\n\n### c\n\nFormulate the inverse cumulative distribution function and write a function called `qtriangle` that implements this.\n\n### d\n\nWrite a function called `rtriangle` that samples `n` random values from a triangle distribution.\n\n\n## 3.5 Coordinate descent (For advanced students!)\n\nWe've previously seen the Gradient descent algorithm (Week 4). A short recap: there are various methods of estimating the parameters of a statistical model e.g. least squares or maximum likelihood estimation. In maximum likelihood estimation a maximum of a real function (the likelihood function) needs to be found by means of optimization. Various optimization methods exist for finding the minimum or maximum of a real function.\n\nLike Gradient descent, Coordinate descent is an iterative algorithm, that can be used to find a (local) minimum of a function that involves more than $1$ parameter! The idea is that one conditions on all parameters except $1$, update the parameter we did not condition on, and repeat this for all parameters. We repeat this cycle many times until convergence. \n\nTake for example the function \\(f(x, y) = x^2 + y^2 + x\\cdot y)\\). The minimum can be found by condition on some $x$ (keep it fixed) and find the minimum for $y$ given this value of $x$. We then condition on this new value of $y$, and find a new $x$ (the one that minimizes $f$, w.r.t. $x$, given a value for $y$). We then repeat this until the parameters $x$ and $y$ do not change in between updates. \n\n### a\nWrite an `R` function that uses the idea of coordinate descent to find the minimum of a function of the form:\n\n$f(x, y) = ax^2 + by^2 + cx\\cdot y$, with $a$, $b$ and $c$ some real numbers.\n\nYou will need:\n\n* A function to evaluate the partial derivative w.r.t. $x$, and solve for $x$ s.t. $f'_x(x, y | y) = 0$\n* A function to evaluate the partial derivative w.r.t. $y$, and solve for $y$ s.t. $f'_y(x, y | x) = 0$\n* A while loop that repeats the update cycle until the sum of the absolute differences $|x_{n+1} - x_{n}|$ and $|y_{n+1} - y_{n}|$ is smaller than `1e-4`.\n\nThe input of the function should be a starting value for $x$, a starting value for $y$, $a$, $b$, and $c$. The output should be a dataframe with an entry for the values of $x$ and $y$ at each step of the algorithm. So the first entry of this dataframe is the starting values, provided by you, of $x$ and $y$. The second entry is the first value of $y$, and the update of $x$, given the current value of $y$. The third entry is the updated value of $x$ and the update value of $y$. And so on. \n\nMake sure that the algorithm performs no more than a $100$ cycles of updating both $x$ and $y$\n\n\n### b\nDemonstrate the algorithm for the function $g(x, y) = x^2 + 2y^2 - x\\cdot y$ for start values $x_0 = -3$ and $y_0 = -2$.\n\nMake a contourplot of the function $g$. Add to the contourplot, using the function `segments`, a line between each subsequent update of the parameters.\n\n\n### c\n\nAlso demonstrate the algorithm for the function $h(x, y) = 1.5x^2 + 2y^2 - 3x\\cdot y$, for start values $x_0 = -2$ and $y_0 = -3$. Again make a contourplot with the steps.\n\nWhat are the differences?",
    "created" : 1570783314690.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3001231185",
    "id" : "A719C1E7",
    "lastKnownWriteTime" : 1570803890,
    "last_content_update" : 1570803890759,
    "path" : "~/GitHub/15 Statistical Computing with R/w5_all-in-one/w5_exercises_stats_and_visualization.Rmd",
    "project_path" : "w5_exercises_stats_and_visualization.Rmd",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}