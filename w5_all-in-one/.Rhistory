oh_factor <- factor(rep(names(observed_haircolours), observed_haircolours))
plot(oh_factor)
plot(rep(names(observed_haircolours),5))
rep(names(observed_haircolours),5)
hist(rep(names(observed_haircolours),5))
barplot(rep(names(observed_haircolours),5))
factor(sample(1000,c(1:5),levels=c("ant", "cat", "dog", "giraffe", "elephant"))
factor(sample(1000,c(1:5)),levels=c("ant", "cat", "dog", "giraffe", "elephant"))
sample(1000,c(1:5))
sample(1000,c(1:5),replace = TRUE)
sample(c(1:5),1000,replace = TRUE)
factor(sample(c(1:5),1000,replace = TRUE),levels=c("ant", "cat", "dog", "giraffe", "elephant"))
factor(sample(c("ant", "cat", "dog", "giraffe", "elephant"),1000))
factor(sample(c("ant", "cat", "dog", "giraffe", "elephant"),1000, replace=TRUE))
#,levels=c("ant", "cat", "dog", "giraffe", "elephant")
set.seed(20171004)
x <- rchisq(500, df = 3)
x
x=sort(x)
x
N = length(x)
t_probs = seq(0.5/N,(N-0.5)/N,by=1/N)
t_probs
qnorm(0)
qnorm(1)
qnorm(0.5)
quantitles = qchisq(t_probs, df=3)
qqplot(x,quantitles)
plot(quantiles, x)
quantiles = qchisq(t_probs, df=3)
plot(quantiles, x)
abline(a = 0, b = 1, col = 'red')
qqplot(x,qchisq(ppoints(500), df = 3))
qqplot(x,qchisq(ppoints(500), df = 3))
qqline(y, distribution = function(p) qchisq(p, df = 3),
prob = c(0.1, 0.6), col = 2)
qqplot(x,qchisq(ppoints(500), df = 3))
qqline(x, distribution = function(p) qchisq(p, df = 3),
prob = c(0.1, 0.6), col = 2)
x <- rchisq(500, df = 3) + 3
qqplot(x,qchisq(ppoints(500), df = 3))
qqline(x, distribution = function(p) qchisq(p, df = 3),
prob = c(0.1, 0.6), col = 2)
set.seed(1212)
B <- 734
N <- 10
N10 <- replicate(B, mean(rnorm(N, mean = 2, sd = 3)))
N <- 100
N100 <- replicate(B, mean(rnorm(N, mean = 2, sd = 3)))
N <- 1000
N1000 <- replicate(B, mean(rnorm(N, mean = 2, sd = 3)))
N10
hist(N10)
nrow <- 5
ncol <- 5
pyramid <- matrix(0, nrow=nrow, ncol=ncol)
for (i in 1:nrow){
for (j in 1:ncol){
pyramid[i, j] <- min(min(i, nrow-i+1), min(j, ncol-j+1))
}
}
# look at the contents:
pyramid
nrow <- 15
ncol <- 15
pyramid <- matrix(0, nrow=nrow, ncol=ncol)
for (i in 1:nrow){
for (j in 1:ncol){
pyramid[i, j] <- min(min(i, nrow-i+1), min(j, ncol-j+1))
}
}
# look at the contents:
pyramid
nrow <- 15
ncol <- 15
pyramid <- matrix(0, nrow=nrow, ncol=ncol)
for (i in 1:nrow){
for (j in 1:ncol){
pyramid[i, j] <- min(i, nrow-i+1,j, ncol-j+1)
}
}
# look at the contents:
pyramid
nrow <- 3
ncol <- 3
pyramid <- matrix(0, nrow=nrow, ncol=ncol)
for (i in 1:nrow){
for (j in 1:ncol){
pyramid[i, j] <- min(i, nrow-i+1,j, ncol-j+1)
}
}
# look at the contents:
pyramid
nrow <- 15
ncol <- 15
pyramid <- matrix(0, nrow=nrow, ncol=ncol)
for (i in 1:nrow){
for (j in 1:ncol){
pyramid[i, j] <- min(i, nrow-i+1,j, ncol-j+1)
}
}
# look at the contents:
pyramid
?contour
pyramid(1,2)
pyramid
pyramid[1,2]
pyramid[2,2]
x <- y <- 1:15
contour(x,y,pyramid[x,y])
x <- y <- 1:15
contour(x,y,pyramid[x,y],nlevels=length(unique(c(pyramid)))
x <- y <- 1:15
contour(x,y,pyramid[x,y],nlevels=length(unique(c(pyramid))
x <- y <- 1:15
contour(x,y,pyramid[x,y],nlevels=length(unique(c(pyramid))))
c(pyramid)
pyramid[x,y]
image(pyramid)
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv", sep=",")
nba
row.names(nba) <- nba$Name
nba <- nba[,2:20]
nba
nba_matrix <- data.matrix(nba)
nba_matrix
heatmap(
nba_matrix, Rowv=NA, Colv=NA, col = cm.colors(256),
scale="column", margins=c(5,10))
install.packages('mvtnorm')
sigma_cor <- matrix(c(1, 0.7, 0.7, 1), ncol=2)
sigma_cor
install.packages('mvtnorm.')
install.packages('mvtnorm')
install.packages('mvtnorm')
install.packages('mvtnorm')
package_version('mvtnorm')
library(mvtnorm)
quantiles_seq <- seq(-3, 3, by = 0.1) quantiles <- expand.grid(quantiles_seq, quantiles_seq)
quantiles_seq <- seq(-3, 3, by = 0.1)
quantiles <- expand.grid(quantiles_seq, quantiles_seq)
quantiles
library(mvtnorm)
densities_uncor <- dmvnorm(quantiles) densities_cor <- dmvnorm(quantiles, sigma = sigma_cor)
library(mvtnorm)
densities_uncor <- dmvnorm(quantiles)
densities_cor <- dmvnorm(quantiles, sigma = sigma_cor)
sigma_cor <- matrix(c(1, 0.7, 0.7, 1), ncol=2)
library(mvtnorm)
densities_uncor <- dmvnorm(quantiles)
densities_cor <- dmvnorm(quantiles, sigma = sigma_cor)
densities_cor
densities_uncor_matrix <- matrix(densities_uncor, ncol = sqrt(length(densities_uncor)))
densities_cor_matrix <- matrix(densities_cor, ncol = sqrt(length(densities_cor)))
contour(x = quantiles_seq, y = quantiles_seq, z = densities_uncor_matrix)
contour(x = quantiles_seq, y = quantiles_seq, z = densities_cor_matrix)
my_mystery <- read.table("0_data/mystery.txt")
summary(my_mystery )
hist(my_mystery$x)
hist(my_mystery$y)
plot(my_mystery)
library(hexbin)
install.packages('hexbin')
library(hexbin)
library(hexbin)
plot(hexbin(my_mystery, xbins=100))
?hexbin
smoothScatter(my_mystery, bandwidth = 0.001, nbin=1000)
dtriangle <- function(x){
(x >= 0 & x < 0.5) * 4 * x + (x >= 0.5 & x <= 1) * 4 * (1 - x)
}
curve(dtriangle, asp = 1, from = -0.5, to = 1.5)
integrate(dtriangle, lower = -1, upper = 2)$value
qtriangle <- function(x){
(x >= 0 & x < 0.5) * sqrt(x / 2) + (x >= 0.5 & x <= 1) * (1 - sqrt((1 - x) / 2)) + (x > }
qtriangle <- function(x){(x >= 0 & x < 0.5) * sqrt(x / 2) + (x >= 0.5 & x <= 1) * (1 - sqrt((1 - x) / 2)) + (x >1) }
qtriangle <- function(x){(x >= 0 & x < 0.5) * sqrt(x / 2) + (x >= 0.5 & x <= 1) * (1 - sqrt((1 - x) / 2)) + (x >1) }
curve(qtriangle, from=-1, to=2, add=T, col='red')
x=c(983,1041,1026,1025,1033,968,1028)
loglik=-Inf
for (m in seq(900,1100,0.1)){
for (s in seq(10,40,0.1)){
tmp=sum(log(dnorm(x,m,s))) # compute the loglikelihood by summing
cat('mu is',m,' and sigma is',s,'loglik(mu,sigma) is',tmp,'\n')
if (tmp>loglik){
loglik=tmp
mu=m
sigma=s
} }}
x=c(983,1041,1026,1025,1033,968,1028)
loglik=-Inf
for (m in seq(900,1100,0.1)){
for (s in seq(10,40,0.1)){
tmp=sum(log(dnorm(x,m,s))) # compute the loglikelihood by summing
if (tmp>loglik){
loglik=tmp
mu=m
sigma=s
} }}
cat('mu is',mu,' and sigma is',sigma)
x=c(983,1041,1026,1025,1033,968,1028)
ll = function(theta,x) {
mu=theta[1]
sigma=theta[2]
-sum(log(dnorm(x,mu,sigma))) # compute loglikelihood by summing
} # add a minus sign, because optim minimizes.
mle=optim(c(1000,25),ll,x=x,method="BFGS")
x=c(983,1041,1026,1025,1033,968,1028)
ll = function(theta,x) {
mu=theta[1]
sigma=theta[2]
-sum(log(dnorm(x,mu,sigma))) # compute loglikelihood by summing
} # add a minus sign, because optim minimizes.
mle=optim(c(1000,25),ll,x=x,method="BFGS")
mle
x=c(983,1041,1026,1025,1033,968,1028)
loglik=-Inf
for (m in seq(900,1100,0.1)){
for (s in seq(10,40,0.1)){
tmp=sum(log(dnorm(x,m,s))) # compute the loglikelihood by summing
if (tmp>loglik){
loglik=tmp
mu=m
sigma=s
} }}
cat('mu is',mu,' and sigma is',sigma)
plot(x, dnorm(0,1))
plot(x, dnorm(x,0,1))
x
x <- seq(-5,5,by = 0.1)
x
plot(x, dnorm(x,0,1))
x <- seq(-5,5,by = 0.1)
plot(x, dnorm(x,0,1), type  ='l')
x <- seq(-5,5,by = 0.1)
plot(x, dnorm(x,0,1), type  ='l')
lines(x,dt(x,0,1,5))
?ddt
?DT
?dt
x <- seq(-5,5,by = 0.1)
plot(x, dnorm(x,0,1), type  ='l')
lines(x,dt(x,5))
x <- seq(-5,5,by = 0.1)
plot(x, dnorm(x,0,1), type  ='l')
lines(x,dt(x,5), col = 'red')
x <- seq(-5,5,by = 0.1)
plot(x, dnorm(x,0,1), type  ='l')
lines(x,dt(x,5), col = 'red')
lines(x,dt(x,50), col = 'pink')
lines(x,dt(x,500), col = 'yellow')
x <- seq(-5,5,by = 0.1)
plot(x, dnorm(x,0,1), type  ='l')
lines(x,dt(x,5), col = 'red')
lines(x,dt(x,20), col = 'pink')
lines(x,dt(x,50), col = 'yellow')
x <- seq(-5,5,by = 0.1)
plot(x, dnorm(x,0,1), type  ='l')
lines(x,dt(x,5), col = 'red')
lines(x,dt(x,20), col = 'pink')
lines(x,dt(x,50), col = 'yellow')
x=c(983,1041,1026,1025,1033,968,1028)
n=length(x)
L=mean(x) + qt(c(0.05 0.95),n-1)*sd(x)/sqrt(n) # L=994.5
x=c(983,1041,1026,1025,1033,968,1028)
n=length(x)
L=mean(x) + qt(c(0.05,0.95),n-1)*sd(x)/sqrt(n) # L=994.5
#U=mean(x) + qt(0.05,n-1)*sd(x)/sqrt(n) # U=1035.2
x=c(983,1041,1026,1025,1033,968,1028)
n=length(x)
mean(x) + qt(c(0.05,0.95),n-1)*sd(x)/sqrt(n) # L=994.5
#U=mean(x) + qt(0.05,n-1)*sd(x)/sqrt(n) # U=1035.2
x <- rnorm(3,2)
n=length(x)
mean(x) + qt(c(0.05,0.95),n-1)*sd(x)/sqrt(n)
count=0
for (i in 1:10000){
x <- rnorm(3,2)
n=length(x)
mean(x) + qt(c(0.05,0.95),n-1)*sd(x)/sqrt(n)
count=count + ((L < 3)&(U>3))
}
count=0
for (i in 1:10000){
x <- rnorm(3,2)
n=length(x)
cl = mean(x) + qt(c(0.05,0.95),n-1)*sd(x)/sqrt(n)
count=count + ((cl[1] < 3)&(cl[2]>3))
}
count=0
for (i in 1:10000){
x <- rnorm(3,2)
n=length(x)
cl = mean(x) + qt(c(0.05,0.95),n-1)*sd(x)/sqrt(n)
count=count + ((cl[1] < 3)&(cl[2]>3))
}
count
count=0
for (i in 1:10000){
x <- rnorm(3,2)
n=length(x)
cl = mean(x) + qt(c(0.05,0.95),n-1)*sd(x)/sqrt(n)
count=count + ((cl[1] < 3)&(cl[2]>3))
}
count
count=0
for (i in 1:10000){
x <- rnorm(3,2)
n=length(x)
cl = mean(x) + qt(c(0.05,0.95),n-1)*sd(x)/sqrt(n)
count=count + ((cl[1] < 3)&(cl[2]>3))
}
count
count=0
for (i in 1:10000){
x <- rnorm(3,2)
n=length(x)
cl = mean(x) + qt(c(0.05,0.95),n-1)*sd(x)/sqrt(n)
count=count + ((cl[1] < 3)&(cl[2]>3))
}
count
count=0
for (i in 1:10){
x <- rnorm(3,2)
n=length(x)
cl = mean(x) + qt(c(0.05,0.95),n-1)*sd(x)/sqrt(n)
count=count + ((cl[1] < 3)&(cl[2]>3))
}
count
count=0
for (i in 1:10){
x <- rnorm(3,2)
n=length(x)
cl = mean(x) + qt(c(0.05,0.95),n-1)*sd(x)/sqrt(n)
count=count + ((cl[1] < 3)&(cl[2]>3))
cat(cl)
}
count
count=0
for (i in 1:10){
x <- rnorm(30, 3,2)
n=length(x)
cl = mean(x) + qt(c(0.05,0.95),n-1)*sd(x)/sqrt(n)
count=count + ((cl[1] < 3)&(cl[2]>3))
cat(cl,'/n')
}
count
count=0
for (i in 1:10){
x <- rnorm(30, 3,2)
n=length(x)
cl = mean(x) + qt(c(0.05,0.95),n-1)*sd(x)/sqrt(n)
count=count + ((cl[1] < 3)&(cl[2]>3))
cat(cl,'\n')
}
count
count=0
for (i in 1:1000){
x <- rnorm(30, 3,2)
n=length(x)
cl = mean(x) + qt(c(0.05,0.95),n-1)*sd(x)/sqrt(n)
count=count + ((cl[1] < 3)&(cl[2]>3))
cat(cl,'\n')
}
count
count=0
for (i in 1:1000){
x <- rnorm(30, 3,2)
n=length(x)
cl = mean(x) + qt(c(0.05,0.95),n-1)*sd(x)/sqrt(n)
count=count + ((cl[1] < 3)&(cl[2]>3))
#cat(cl,'\n')
}
count
n=10; m=15
x=rnorm(n,0,3)
y=rnorm(m,3,3)
s2=((n-1)*var(x) + (m-1)*var(y))/(n+m-2)
s=sqrt(s2)*sqrt(1/n + 1/m)
L=mean(x)-mean(y) + qt(0.025,n+m-2)*s
U=mean(x)-mean(y) - qt(0.025,n+m-2)*s
l
L
U
flash <- c(17, 25, 17, 18,15)
x <- c(17, 25, 17, 18,15)
mean(x)
dbinom(125, 250,0.5)
dbinom(240, 250,0.5)
lambda=seq(5,30,0.01)
loglik=0
for (i in 1:5){
loglik = loglik + log(dpois(x[i],lambda))
}
plot(lambda,loglik,type=’l’)
dbinom(125, 250,0.5)
dbinom(240, 250,0.5)
lambda=seq(5,30,0.01)
loglik=0
for (i in 1:5){
loglik = loglik + log(dpois(x[i],lambda))
}
plot(lambda,loglik,type='l')
x <- c(17, 25, 17, 18,15)
mean(x)
lambda=seq(5,30,0.01)
loglik=0
for (i in 1:5){
loglik = loglik + log(dpois(x[i],lambda))
}
plot(lambda,loglik,type='l')
x <- c(17, 25, 17, 18,15)
mean(x)
lambda=seq(5,30,0.01)
loglik=0
for (i in 1:5){
loglik = loglik + log(dpois(x[i],lambda))
cat(dpois(x[i])
}
x <- c(17, 25, 17, 18,15)
mean(x)
lambda=seq(5,30,0.01)
loglik=0
for (i in 1:5){
loglik = loglik + log(dpois(x[i],lambda))
cat(dpois(x[i]))
}
x <- c(17, 25, 17, 18,15)
mean(x)
lambda=seq(5,30,0.01)
loglik=0
for (i in 1:5){
loglik = loglik + log(dpois(x[i],lambda))
cat(log(dpois(x[i],lambda)))
}
plot(lambda,loglik,type='l')
cat(log(dpois(x[i],c(5,19))))
x <- c(17, 25, 17, 18,15)
mean(x)
lambda=seq(5,30,0.01)
loglik=0
for (i in 1:5){
loglik = loglik + log(dpois(x[i],lambda))
}
plot(lambda,loglik,type='l')
ind=which.max(loglik) mle=lambda[ind]
x <- c(17, 25, 17, 18,15)
mean(x)
lambda=seq(5,30,0.01)
loglik=0
for (i in 1:5){
loglik = loglik + log(dpois(x[i],lambda))
}
plot(lambda,loglik,type='l')
ind=which.max(loglik)
mle=lambda[ind]
mle
x=c(5.5,6.4,49.9,162.1,168.1,115.8,57.5,159.2,60.30,58.8)
ll = function(lambda){
sum(log(dexp(x,1/lambda)))
}
mle=optimize(ll,c(0,100),maximum=TRUE) # mle = 84.36
mle
testscores <- read.csv("0_data/tobit.csv")
d_read <- density(testscores$read, from = 20, to = 84, bw = "SJ")
d_math <- density(testscores$math, from = 20, to = 84, bw = "SJ")
View(d_math)
View(d_math)
plot(d_read, main='', xlab='', col='pink')
par(new=TRUE)
plot(d_math,main='', xlab='')
plot(d_read, main = "", xlab = "")
lines(d_math, col = 'red')
class(d_math)
View(testscores)
str(testscores)
summary(testscores)
?density
my_function <- function(x) { return(x^3)
}
plot(my_function, y=-3, to=3)
plot(my_function)
?plot
plot(my_function, from=-3, to=3)
plot(my_function, -3, 3)
plot(my_function, y=-3, to=3)
plot(my_function, y=-3, to=3，type='p')
plot(my_function, y=-3, to=3，type='l')
plot(my_function, y=-3, to=3，type='l')
plot(my_function, y=-3, to=3,type='l')
plot(my_function, y=-3, to=3,type='p')
plot(my_function, y=-3, to=3,type='b')
plot(my_function, y=-3, to=3,type='s')
var1 <- rnorm(100)
var2 <- rnorm(100)
plot(var1 ~ var2 + var1, pch=16)
plot(var1 ~ var2 + var1, pch='')
plot(var1 ~ var2 + var1, pch='')
plot(var1 ~ var2 + var1, pch='*')
var3<- rnorm(100)
plot(var1 ~ var2 + var3, pch='*')
plot(var1 ~ var2 + var3, pch='*')
plot(var1 ~ var2, pch=16)
plot(var1, var2, pch=16)
plot(var1 ~ var2, pch=16)
plot(var2 ~ var2\1, pch=16)
plot(var2 ~ var21, pch=16)
plot(var2 ~ var1, pch=16)
plot(var1, var2, pch=16)
plot(var1, var2, pch=4)
plot(var1, var2, pch=9)
plot(var1, var2, pch=1)
