knitr::opts_chunk$set(echo = TRUE)
my_matrix <- matrix(1:24, ncol=6, byrow=FALSE)
my_matrix[1,6]
colnames(my_matrix) <- letters[1:6]
rownames(my_matrix) <- LETTERS[1:4]
my_matrix["A", ]
my_matrix[, "a"]
my_matrix["A", , drop=FALSE]
my_matrix[, "a", drop=FALSE]
mydlist <- vector(mode = 'list', length = 2)
mydlist[1] <- 97:122
mydlist[2] <- letters
mydlist
ydlist <- vector(mode = 'list', length = 2)
ydlist
name=list('name')
name
name=list('name')
normal_values = rnorm(50)
sample(1:5)
name=list('name')
normal_values = rnorm(50)
id <- sample(1:50)
diag(3)
diag(10, 3, 4)
my_list <- list(
name = "my list",
normal_values = rnorm(50),
sample(1:10, 50, replace=TRUE),
id = sample(1:50),
my_sampler = function(n) {return(rnorm(n))}
)
my_list
my_list$my_sampler
my_list$my_sampler[5]
my_list$my_sampler(5)
df < - my_list.as.data.frame
df < - as.data.frame(my_list)
my_list[-5]
as.data.frame(my_list)
as.data.frame(my_list[-5])
head(as.data.frame(my_list[-5]),3)
my_data_frame <- data.frame( norm_vals = my_list$normal_values, samples = my_list[[3]],
id = my_list[["id"]]
)
b <- rnorm(100)
bind(a,b)
cbind(a,b)
a <- rnorm(100)
b <- rnorm(100)
cbind(a,b)
c[a,b]
c(a,b)
rbind(a,b)
my_normal_matrix <- cbind(var1, var2) my_list <- list(
my_normal_matrix <- cbind(var1, var2)
min = min(b),
min = min(a),
my_list <- list(
data_matrix_example = head(my_normal_matrix, 10),
cor = cor(my_normal_matrix),
cov = cov(my_normal_matrix),
univariate_statistics = list(
variable_1 = c(
min = min(a),
max = max(a),
mean = mean(a),
range = range(a))),
variable_2 = c(
min = min(b),
max = max(b),
mean = mean(b),
range = range(b)) )
my_normal_matrix <- cbind(a, v)
my_normal_matrix <- cbind(a, b)
my_normal_matrix
my_list
unlist(my_ist, recursive = FALSE)
unlist(my_List, recursive = FALSE)
unlist(my_list, recursive = FALSE)
str(nonrecur)
nonrecur = unlist(my_list, recursive = FALSE)
str(nonrecur)
nonrecur = unlist(my_list, recursive = FALSE)
str(nonrecur)
my_normal_matrix <- cbind(a, b)
my_list <- list(
data_matrix_example = head(my_normal_matrix, 10),
cor = cor(my_normal_matrix),
cov = cov(my_normal_matrix),
univariate_statistics = list(
variable_1 = c(
min = min(a),
max = max(a),
mean = mean(a),
range = range(a))),
variable_2 = c(
min = min(b),
max = max(b),
mean = mean(b),
range = range(b)) )
nonrecur = unlist(my_list, recursive = FALSE)
str(nonrecur)
nonrecur = unlist(my_list)
str(nonrecur)
str(recur)
recur = unlist(my_list)
str(recur)
nonrecur = unlist(my_list, recursive = FALSE)
str(nonrecur)
recur
class(nonrecur)
class(recur)
sum_func <- function (a,b) {
my_normal_matrix <- cbind(a, b)
my_list <- list(
data_matrix_example = head(my_normal_matrix, 10),
cor = cor(my_normal_matrix),
cov = cov(my_normal_matrix),
univariate_statistics = list(
variable_1 = c(
min = min(a),
max = max(a),
mean = mean(a),
range = range(a))),
variable_2 = c(
min = min(b),
max = max(b),
mean = mean(b),
range = range(b)) )
return my_list
sum_func <- function (a,b) {
my_normal_matrix <- cbind(a, b)
my_list <- list(
data_matrix_example = head(my_normal_matrix, 10),
cor = cor(my_normal_matrix),
cov = cov(my_normal_matrix),
univariate_statistics = list(
variable_1 = c(
min = min(a),
max = max(a),
mean = mean(a),
range = range(a))),
variable_2 = c(
min = min(b),
max = max(b),
mean = mean(b),
range = range(b)) )
return (my_list)
}
sum_func(a,b)
my_list
my_personal_details <- list(species = "human", age = "75")
# Use age to print:
paste("I am", my_personal_details[[2]], "years old.")
# Oh oops, forgot to add that my name is...
my_personal_details <- c(name = "Mr. Miyagi", my_personal_details)
# Let's print my age again:
paste("I am", my_personal_details[[2]], "years old.")
# hmm....
my_list2 <- as.list(1:26000)
paste(letters[1:5], rep(c(1, 2), each=5), sep="") # this uses vector recycling!
paste(letters[1:5], rep(c(1, 2), each=5), sep="")
names(my_list2)=paste(letters, rep(1:10000, each=26), sep="")
paste(letters, rep(1:10000, each=26), sep="")
my_list2 <- as.list(1:260000)
paste(letters[1:5], rep(c(1, 2), each=5), sep="")
names(my_list2)=paste(letters, rep(1:10000, each=26), sep="")
my_list2[[13001]]
my_list2[[13001]].name
my_list2[13001]
my_list2[13001]
my_list2['a501']
system.time(my_list2[13001])
system.time(replicate(n-100,my_list2[13001]))
system.time(replicate(n=100,my_list2[13001]))
system.time(replicate(n=100,my_list2['a501']))
my_vector = sample(1:26)
my_vector
lapply(my_vector, sqrt)
class(lapply(my_vector, sqrt))
letter(3)
letter[3]
letters[3]
letters(3)
getletter <- function(n) {return letters[n]}
getletter <- function(n) {return (letters[n])}
lapply(my_vector, getletter)
getwd()
my_list <- replicate(10, list(rnorm(5)))
my_list
mean(my_list)
mean(unlist(my_list))
mean(unlist(my_list,recursive = FALSE))
unlist(my_list,recursive = FALSE)
lapply(my_list,mean)
unlist(lapply(my_list,mean))
?prod
my_list = rnorm(10)
my_list
write.table(my_list, file = 'my_list.csv')
?write.table
write.table(my_list, file = 'my_list.csv', col.names = FALSE)
write.table(my_list, file = 'my_list.csv', col.names = FALSE, row.names = FALSE)
wrong_1 <- read.table("0_data/difficult.txt", stringsAsFactors = FALSE) wrong_2 <- read.csv("0_data/difficult.txt", stringsAsFactors = FALSE) wrong_3 <- read.csv2("0_data/difficult.txt", stringsAsFactors = FALSE)
wrong_1 <- read.table("0_data/difficult.txt", stringsAsFactors = FALSE)
wrong_2 <- read.csv("0_data/difficult.txt", stringsAsFactors = FALSE)
wrong_3 <- read.csv2("0_data/difficult.txt", stringsAsFactors = FALSE)
wrong_1
wrong_2
wrong_3
?read.csv2
correct <- read.csv("0_data/difficult.txt", sep=";")
head(correct)
head(wrong_3)
class(wrong_3)
class(wrong_3[1])
wrong_3[1]
wrong_3[[1]
]
wrong_3[[1]]
class(wrong_3[[1]])
my_data_frame <- read.csv("0_data/my_data_frame.csv")
my_data_frame <- read.csv("0_data/my_data_frame.csv")
my_data_frame[c(3, 2, 1), ]
head(my_data_frame,3)
my_data_frame[c(3, 2, 1), ]
head(my_data_frame,3)
sort(my_data_frame$id)
head(my_data_frame,3)
?sort
?order
order(c(3, 1, 2))
ordered <- my_data_frame[order(my_data_frame$id), ] head(ordered)
ordered <- my_data_frame[order(my_data_frame$id), ]
head(ordered)
jumble <- read.table("0_data/jumble.txt")
jumble
head(jumble,5)
paste(apply(jumble, 2, function(x) {
paste(x[seq(4, length(x), by = 4)], collapse = "")
}), collapse = "")
apply(jumble, 2, function(x) {
paste(x[seq(4, length(x), by = 4)], collapse = "")
})
paste(apply(jumble, 2, function(x) {
paste(x[seq(4, length(x), by = 4)])
}), collapse = "")
library(nycflights13)
install.packages(nycflights13)
library(nycflights13)
install.packages(nycflights13)
library(nycflights13)
install.packages(nycflights13)
#library(nycflights13)
install.packages('nycflights13')
#library(nycflights13)
install.packages('nycflights13')
library(nycflights13)
help(package = 'nycflights13')
data(flights)
head(flights)
#install.packages('nycflights13')
library(nycflights13)
data("flights")
#install.packages('nycflights13')
library(nycflights13)
data("flights")
class(flights)
dim(flights)
head(flights)
str(flights)
summary(flights)
class(flights)
dim(flights)
#head(flights)
str(flights)
summary(flights)
#install.packages('nycflights13')
library(nycflights13)
data("flights")
head(flights,5)
flights[[1]]
flights[[1,]]
flights[1,]
print(flights[1,])
flight(flights$dest = 'SFO' |flights$dest = 'OAK' )
flight(flights$dest == 'SFO' |flights$dest == 'OAK' )
flights(flights$dest == 'SFO' |flights$dest == 'OAK' )
flights[flights$dest == 'SFO' |flights$dest == 'OAK']
flights[flights$dest == 'SFO' |flights$dest == 'OAK',]
