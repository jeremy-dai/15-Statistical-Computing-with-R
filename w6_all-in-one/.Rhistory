p_value <- 2*qnorm(z)
p_value
qnorm(-5)
p = 0.5
z =(7 - 20*p)/sqrt(n*p*(1-p))
c_score = -qnorm(0.05)
p_value <- 2*pnorm(z)
z
c_score
p_value
p = 0.5
n = 20
z =(7 - n*p)/sqrt(n*p*(1-p))
c_score = -qnorm(0.05)
p_value <- 2*pnorm(z)
p = 0.5
n = 20
z =(7 - n*p)/sqrt(n*p*(1-p)) #-1.34
c_score = -qnorm(0.05) #1.64
p_value <- 2*pnorm(z) #0.18
p=7/n
L=p + qnorm(0.05)*sqrt(p*(1-p)/n)
U=p - qnorm(0.05)*sqrt(p*(1-p)/n)
prop.test(7,n,conf.level=0.9,correct=F)
p = 1/3
n = 20
z =(7 - n*p)/sqrt(n*p*(1-p)) #-1.34
c_score = -qnorm(0.05) #1.64
p_value <- 2*pnorm(z) #0.18
p=7/n
L=p + qnorm(0.05)*sqrt(p*(1-p)/n)
U=p - qnorm(0.05)*sqrt(p*(1-p)/n)
p = 1/3
n = 20
z =(7 - n*p)/sqrt(n*p*(1-p)) #0.158
c_score = -qnorm(0.05) #1.64
p_value <- 2*pnorm(-z) #0.18
p=7/n
L=p + qnorm(0.05)*sqrt(p*(1-p)/n)
U=p - qnorm(0.05)*sqrt(p*(1-p)/n)
p = 0.5
n = 20
z =(7 - n*p)/sqrt(n*p*(1-p)) #-1.34
c_score = -qnorm(0.1) #1.64
p_value <- pnorm(z) #0.18
p=7/n
L=p + qnorm(0.05)*sqrt(p*(1-p)/n)
U=p - qnorm(0.05)*sqrt(p*(1-p)/n)
p = 0.5
n = 20
z =(7 - n*p)/sqrt(n*p*(1-p)) #-1.34
c_score = -qnorm(0.1) #1.28
p_value <- 1-pnorm(z)
p=7/n
L=p + qnorm(0.05)*sqrt(p*(1-p)/n)
U=p - qnorm(0.05)*sqrt(p*(1-p)/n)
p = 0.5
n = 20
z =(7 - n*p)/sqrt(n*p*(1-p)) #-1.34
c_score = -qnorm(0.1) #1.28
p_value <- 1-pnorm(z)
p=7/n
L=p + qnorm(0.1)*sqrt(p*(1-p)/n)
U=p - qnorm(0.05)*sqrt(p*(1-p)/n)
p = 0.5
n = 20
z =(7 - n*p)/sqrt(n*p*(1-p)) #-1.34
c_score = -qnorm(0.1) #1.28
p_value <- 1-pnorm(z)
p=7/n
L=p + qnorm(0.1)*sqrt(p*(1-p)/n)
U=1
prop.test(x,n,conf.level=0.9,correct=F,alternative=’greater’)
prop.test(x,n,conf.level=0.9,correct=F,alternative='greater')
prop.test(7,n,conf.level=0.9,correct=F,alternative='greater')
n1=250; x1=140; p1=x1/n1
n2=20; x2=7; p2=x2/n2
prop.test(c(x1,x2),c(n1,n2),conf.level=0.9,correct=FALSE)
n1=250; x1=140; p1=x1/n1
n2=20; x2=7; p2=x2/n2
prop.test(c(x1,x2),c(n1,n2),conf.level=0.95,correct=FALSE)
pchisq(2.7,1
)
x=c(983,1041,1026,1025,1033,968,1028); n=length(x)
x=c(983,1041,1026,1025,1033,968,1028); n=length(x)
z=sqrt(n)*(mean(x)-1000)/25
K = qnorm(0.975)
x=c(983,1041,1026,1025,1033,968,1028); n=length(x)
K = qnorm(0.975) * 25/ sqrt(n)
K
x=c(983,1041,1026,1025,1033,968,1028); n=length(x)
K = qnorm(0.975) * 25/ sqrt(n)
pnorm(1000-K, 980,25/ sqrt(n))+1-pnorm(1000+K, 980,25/ sqrt(n))
mu=950:1050
power=pnorm(1000-K, mu,25/ sqrt(n))+1-pnorm(1000+K, mu,25/ sqrt(n)) plot(mu,power,type='l',ylim=c(0,1))
mu=950:1050
power=pnorm(1000-K, mu,25/ sqrt(n))+1-pnorm(1000+K, mu,25/ sqrt(n))
plot(mu,power,type='l',ylim=c(0,1))
abline(h=0.05)
load("0_data/tidy_dat.RData")
str(tidy_dat)
url <- "https://tinyurl.com/w6-data-191018"
mydat <- read.delim(url)
View(mydat)
phone_book <- read.table("0_data/phone_book.txt", header = T, stringsAsFactors = F)
View(phone_book)
LookupNumber <- function(name, phone_book){
for (p in phone_book){print(p)}}
LookupNumber <- function(name, phone_book){
for (p in phone_book){print(p)}}
LookupNumber(	'Aabha', phone_book)
LookupNumber <- function(name, phone_book){
for (p in phone_book){print(p)
break
}
}
LookupNumber(	'Aabha', phone_book)
LookupNumber <- function(name, phone_book){
for (p in phone_book){
print(p)
break
}
}
LookupNumber(	'Aabha', phone_book)
LookupNumber <- function(name, phone_book){
for (p in phone_book[:,1]){
class(phone_book)
dim(phone_book)
LookupNumber <- function(name, phone_book){
for (p in phone_book){
print(p)
break
}
}
LookupNumber(	'Aabha', phone_book)
str(phone_book)
LookupNumber <- function(name, phone_book){
i <- 0
for (n in phone_book$names){
i < i+ 1
if (n == name){
return(phone_book$numbers[i])
break}
}
}
LookupNumber(	'Aabha', phone_book)
phone_book$numbers[0]
phone_book$numbers[[0]]
phone_book$numbers
phone_book$numbers[2]
i <- 2
phone_book$numbers[i]
LookupNumber <- function(name, phone_book){
i <- 0
for (n in phone_book$names){
i < i+ 1
if (n == name){
return(phone_book$numbers[i])
break}
}
}
LookupNumber('Aabha', phone_book)
hone_book$numbers[2]
phone_book$numbers[2]
LookupNumber <- function(name, phone_book){
i <- 0
for (n in phone_book$names){
i <- i+ 1
if (n == name){
return(phone_book$numbers[i])
break}
}
}
LookupNumber('Aabha', phone_book)
system.time(LookupNumber('Brilan', phone_book))
for (n in c( 'Brilan','Dicey','Imre', 'Kaytelyn','Makia','Patrica','Shivaun','Vihana','Wilmetta')){
cat(n,system.time(LookupNumber('Brilan', phone_book)))
}
for (n in c( 'Brilan','Dicey','Imre', 'Kaytelyn','Makia','Patrica','Shivaun','Vihana','Wilmetta')){
cat(n,system.time(LookupNumber('Brilan', phone_book)),sep='\n')
}
strsplit(phone_book[1,1])
strsplit(phone_book[1,1], split ='')
strsplit(phone_book[1,1], split ='')[[1]]
```{r}
B <- length(split_name)
split_name <- strsplit(phone_book[1,1], split ='')[[1]]
B <- length(split_name)
name_numbers <- numeric(B)
name_numbers[1] <- which(LETTERS %in% split_name[1]) %% 10 for (i in 2:B) {
B <- length(split_name)
name_numbers <- numeric(B)
name_numbers[1] <- which(LETTERS %in% split_name[1]) %% 10
for (i in 2:B) {
name_numbers[i] <- which(letters %in% split_name[i]) %% 10 }
name_numbers
LETTERS %in% split_name[1]
which(LETTERS %in% split_name[1])
which(LETTERS %in% split_name[2])
which(LETTERS %in% split_name[3])
which(LETTERS %in% split_name[4])
LETTERS
split_name
?which
which([TRUE, TRUE , TRUE])
which(c(TRUE, TRUE , TRUE)
)
c(1,'t
')
list(1,'c')
paste(name_numbers)
paste
?paste
paste0(name_numbers)
paste(month.abb, letters)
name_number_list = NULL
for (name in (phone_book$names)) {
split_name <- strsplit(name, split ='')[[1]]
B <- length(split_name)
name_numbers <- numeric(B)
name_numbers[1] <- which(LETTERS %in% split_name[1]) %% 10
for (i in 2:B) {
name_numbers[i] <- which(letters %in% split_name[i]) %% 10 }
name_number_list = c(name_number_list,name_numbers)
}
paste(
name_numbers[4], # to avoid NA's
collapse="")
paste(name_numbers[4],collapse="")
paste(name_numbers[1:4],collapse="")
paste(name_numbers[1:4],collapse="k")
paste(name_numbers[1:4],collapse="")
paste(name_numbers[1:4],collapse=NULL)
paste(name_numbers[1:4], sep = 2,collapse=NULL)
paste(name_numbers[1:4], collapse=NULL)
paste(name_numbers[1:4], collapse=NULL) + 1
as.numeric(paste(name_numbers[1:4], collapse=NULL)) + 1
as.numeric(paste(name_numbers[1:4], collapse=''))
as.numeric(paste(name_numbers[1:4], collapse='')) +1
HashFunction <- function(name){
split_name <- strsplit(name, split="")[[1]]
B <- length(split_name)
name_numbers <- numeric(B)
name_numbers[1] <- which(LETTERS%in%split_name[1])%%10
for (i in 2:B){
name_numbers[i] <- which(letters%in%split_name[i])%%10 }
minl <- 1:min(length(name_numbers), 6)
index <- paste(name_numbers[minl], collapse="") # to avoid NA's
index <- as.numeric(index) + 1
return(index)
}
hash_table <- vector(mode ="list", length = 1000000)
indices <- sapply(phone_book$names, HashFunction)
indices
dim(hash_table)
hash_table <- vector(mode ="list", length = 100)
indices <- sapply(phone_book$names, HashFunction)
indices
indices[indices == 981836]
HashFunction('Apple')
HashFunction(c('Apple','Banana'))
sapply(c('Apple','Banana'), HashFunction)
lapply(c('Apple','Banana'), HashFunction)
for (i in 1:2){HashFunction(c('Apple','Banana')[i]))}
for (i in 1:2){HashFunction(c('Apple','Banana')[i])}
for (i in 1:2){print(HashFunction(c('Apple','Banana')[i]))}
dic <- NULL
hash_table
N <- nrow(phone_book)
for (i in 1:N) { # i <- 1
j <- indices[i]
if (is.null(hash_table[[j]])) { hash_table[[j]] <- phone_book[i, ]
} else {
hash_table[[j]] <- rbind(hash_table[[j]], phone_book[i, ])
} }
hash_table <- vector(mode ="list", length = 10)
N <- nrow(phone_book)
for (i in 1:N) { # i <- 1
j <- indices[i]
if (is.null(hash_table[[j]])) { hash_table[[j]] <- phone_book[i, ]
} else {
hash_table[[j]] <- rbind(hash_table[[j]], phone_book[i, ])
} }
hash_table <- vector(mode ="list", length = 10)
N <- nrow(phone_book)
for (i in 1:N) { # i <- 1
j <- indices[i]
if (is.null(hash_table[[j]])) {
hash_table[[j]] <- phone_book[i, ]
} else {
hash_table[[j]] <- rbind(hash_table[[j]], phone_book[i, ])
} }
indices[1]
hash_table[[indices[1]]]
j <- indices[1]
j
j[1]
j[[1]
]
hash_table <- vector(mode ="list", length = 10)
N <- nrow(phone_book)
for (i in 1:N) { # i <- 1
j <- indices[i][[1]]]
hash_table <- vector(mode ="list", length = 10)
N <- nrow(phone_book)
for (i in 1:N) { # i <- 1
j <- indices[i][[1]]
if (is.null(hash_table[[j])]) {
hash_table <- vector(mode ="list", length = 10)
N <- nrow(phone_book)
for (i in 1:N) { # i <- 1
j <- indices[i][[1]]
if (is.null(hash_table[[j]]) {
hash_table <- vector(mode ="list", length = 10)
N <- nrow(phone_book)
for (i in 1:N) { # i <- 1
j <- indices[i][[1]]
if (is.null(hash_table[[j]])) {
hash_table[[j]] <- phone_book[i, ]
} else {
hash_table[[j]] <- rbind(hash_table[[j]], phone_book[i, ])
} }
j <- indices[1][[1]]
j
hash_table[[11214]]
hash_table[11214]
hash_table <- vector(mode ="list", length = 10)
N <- nrow(phone_book)
for (i in 1:N) { # i <- 1
j <- indices[i][[1]]
if (is.null(hash_table[j])) {
hash_table[j] <- phone_book[i, ]
} else {
hash_table[j] <- rbind(hash_table[j], phone_book[i, ])
} }
hash_table <- vector(mode ="list", length = 10)
N <- nrow(phone_book)
#for (i in 1:N) {
i <- 1
j <- indices[i][[1]]
if (is.null(hash_table[j])) {
hash_table[j] <- phone_book[i, ]
} else {
hash_table[j] <- rbind(hash_table[j], phone_book[i, ])
}
#}
i
j
hash_table[j]
hash_table[j]
hash_table[j+1]
hash_table[j] <- rbind(hash_table[j], phone_book[i, ]
)
hash_table[j]
phone_book[i, ]
rbind(hash_table[j],phone_book[i, ])
phone_book[i, ]
hash_table[j]
hash_table[j][[1]] <- phone_book[i, ]
hash_table[j][[1]]
hash_table[j]
hash_table[j][[1]] <- rbind(hash_table[j][[1]], phone_book[i, ])
hash_table[j][[1]]
hash_table <- vector(mode ="list", length = 10)
N <- nrow(phone_book)
#for (i in 1:N) {
i <- 1
j <- indices[i][[1]]
if (is.null(hash_table[j])) {
hash_table[j][[1]] <- phone_book[i, ]
} else {
hash_table[j][[1]] <- rbind(hash_table[j][[1]], phone_book[i, ])
}
#}
hash_table <- vector(mode ="list", length = 10)
N <- nrow(phone_book)
for (i in 1:N) {
#i <- 1
j <- indices[i][[1]]
if (is.null(hash_table[j])) {
hash_table[j][[1]] <- phone_book[i, ]
} else {
hash_table[j][[1]] <- rbind(hash_table[j][[1]], phone_book[i, ])
}
}
hash_table
hash_table[j][[1]]
hash_table[j]
hash_table[[j]
]
HashFunction
#LookupNumberHash <- function(name, table){
name='Ish'
index <- HashFunction(name)
table[index]
#LookupNumberHash <- function(name, table){
name='Ish'
table = hash_table
index <- HashFunction(name)
table[index]
#LookupNumberHash <- function(name, table){
name='Ish'
table = hash_table
index <- HashFunction(name)
LookupNumber(name,table[index])
}
#LookupNumberHash <- function(name, table){
name='Ish'
table = hash_table
index <- HashFunction(name)
LookupNumber(name,table[index])
#  }
#LookupNumberHash <- function(name, table){
name='Ish'
table = hash_table
index <- HashFunction(name)
i = LookupNumber(name,table[index])
#  }
i
#LookupNumberHash <- function(name, table){
name='Ish'
table = hash_table
index <- HashFunction(name)
i = LookupNumber(name,table[[index]])
#  }
i
LookupNumberHash <- function(name, table){
#name='Ish'
#table = hash_table
index <- HashFunction(name)
return(LookupNumber(name,table[[index]]))
}
cat(LookupNumberHash('Ish',hash_table ))
n_list <- c( 'Brilan','Dicey','Imre', 'Kaytelyn','Makia','Patrica','Shivaun','Vihana','Wilmetta')
for (n in n_list){
cat(n,system.time(LookupNumber('Brilan', phone_book)),sep='\n')
}
sapply(n_list, function(name) LookupNumberHash(name, hash_table))
knitr::opts_chunk$set(echo = TRUE, eval = FALSE, fig.show = TRUE)
url <- "http://ec.europa.eu/eurostat/estat-navtree-portlet-prod/BulkDownloadListing?file=data/tsc00005.tsv.gz&unzip=true"
data<-read.delim(url, header= TRUE, sep = '\t')
col_splitted <- strsplit(data$X2006, split = " ")
col_splitted <- strsplit(as.character(data$X2006), split = " ")
col_splitted
prct_col <- sapply(col_splitted, "[", 1)
prct_col
?sapple
?sapple
?sapply
install.packages("png")
file_addr = "0_data/RawCompareSNPTable1.scsv"
d <- read.delim(file_addr, sep = ";", stringsAsFactors = F)
d
View(d)
d <- d[, grep("v1", colnames(d))]
v <- unlist(d)
v
len(v
)
length(vapply(list, function, FUN.VALUE = type, ...))
length(v)
309*16
v <- unique(v)
length(v)
v <- v[v != ""]
length(v)
spl <- strsplit(v, ":")
spl
chrs <- sapply(spl, function(s) s[1])
chrs
chrs <- sapply(spl, function(s) s[1])
chrs
chrs <- sub("chr", "", chrs)
chrs
chrs <- sub("X", "90", chrs)
chrs <- as.numeric(chrs)
chrs
bp <- sapply(spl, function(s) s[2])
bp
bp <- as.numeric(bp)
strg[order(chrs, bp)]
v[order(chrs, bp)]
clean <- lapply(d, function(clm) {c(NA, 1) [v %in% clm + 1] })
View(clean)
View(d)
my_primes <- 2 if (all(3 %% my_primes != 0)){
my_primes <- c(my_primes, 3) } if (all(4 %% my_primes != 0)){
my_primes <- c(my_primes, 4) } if (all(5 %% my_primes != 0)){
my_primes <- c(my_primes, 5) }
my_primes <- 2
if (all(3 %% my_primes != 0)){
my_primes <- c(my_primes, 3) }
if (all(4 %% my_primes != 0)){
my_primes <- c(my_primes, 4) }
if (all(5 %% my_primes != 0)){
my_primes <- c(my_primes, 5) }
4 %% c(2, 3)
any(4 %% c(2, 3))
?par
library(png)
colour_array <- array(0, dim=c(400, 400, 3))
my_rgb <- c(144, 238, 144)/255
for (i in 1:3){
colour_array[, , i] <- my_rgb[i] }
writePNG(colour_array, "0_images/my_image.png")
x <- seq(0, 1, length.out = 400)
gradient_array <- array(0, dim = c(400, 400, 3))
for (i in 1:length(x)) {
gradient_array[i, , 1] <- x[i] }
for (j in 1:length(x)) {
gradient_array[, j, 2] <- x[j] }
writePNG(gradient_array, "0_images/my_gradient.png")
