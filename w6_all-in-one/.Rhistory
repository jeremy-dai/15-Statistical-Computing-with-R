t <- strsplit(x[i], split = ' ')
if (length(t[[1]])) = 1) {print(t)}
SplitCol <- function(col){
x <- as.character(col)
for (i in 1:length(x))
{
t <- strsplit(x[i], split = ' ')
if (length(t[[1]])) == 1) {print(t)}
SplitCol <- function(col){
x <- as.character(col)
n <- length(x)
results <- list(percentzge = numeric(n), comment = character(n))
for (i in 1:n)
{
t <- strsplit(x[i], split = ' ')
print(t[[1]])
#if (length(t[[1]])) == 1) {print(t)}
}
return()
}
SplitCol(data$X2007)
SplitCol <- function(col){
x <- as.character(col)
n <- length(x)
results <- list(percentzge = numeric(n), comment = character(n))
for (i in 1:n)
{
t <- strsplit(x[i], split = ' ')
print(t[[1]][1])
#if (length(t[[1]])) == 1) {print(t)}
}
return()
}
SplitCol(data$X2007)
SplitCol <- function(col){
x <- as.character(col)
n <- length(x)
results <- list(percentzge = numeric(n), comment = character(n))
for (i in 1:n)
{
t <- strsplit(x[i], split = ' ')
results[i][1]= as.numeric(t[[1]][1])
if (length(t[[1]])) == 2) {results[i][2]= as.numeric(t[[1]][2])}
SplitCol <- function(col){
x <- as.character(col)
n <- length(x)
results <- list(percentzge = numeric(n), comment = character(n))
for (i in 1:n)
{
t <- strsplit(x[i], split = ' ')
results[i][1]= as.numeric(t[[1]][1])
if (length(t[[1]])) != 1) {results[i][2]= as.numeric(t[[1]][2])}
SplitCol <- function(col){
x <- as.character(col)
n <- length(x)
results <- list(percentzge = numeric(n), comment = character(n))
for (i in 1:n)
{
t <- strsplit(x[i], split = ' ')
results[i][1]= as.numeric(t[[1]][1])
if (length(t[[1]])) == 1) {results[i][2]= as.numeric(t[[1]][2])}
SplitCol <- function(col){
x <- as.character(col)
n <- length(x)
results <- list(percentzge = numeric(n), comment = character(n))
for (i in 1:n)
{
t <- strsplit(x[i], split = ' ')
results[i][1]= as.numeric(t[[1]][1])
#if (length(t[[1]])) == 1) {
results[i][2]= as.numeric(t[[1]][2])
}
return(results)
}
SplitCol(data$X2007)
SplitCol <- function(col){
x <- as.character(col)
n <- length(x)
results <- list(percentzge = numeric(n), comment = character(n))
for (i in 1:n)
{
t <- strsplit(x[i], split = ' ')
results[i][1]= as.numeric(t[[1]][1])
#if (length(t[[1]])) == 1) {
results[i][2]= as.numeric(t[[1]][2])
}
return(results)
}
results <- SplitCol(data$X2007)
results
SplitCol <- function(col){
x <- as.character(col)
n <- length(x)
results <- list(percentzge = numeric(n), comment = character(n))
for (i in 1:n)
{
t <- strsplit(x[i], split = ' ')
results[[i]][1]= as.numeric(t[[1]][1])
#if (length(t[[1]])) == 1) {
results[[i][2]= as.numeric(t[[1]][2])
SplitCol <- function(col){
x <- as.character(col)
n <- length(x)
results <- list(percentzge = numeric(n), comment = character(n))
for (i in 1:n)
{
t <- strsplit(x[i], split = ' ')
results[[i]][1]= as.numeric(t[[1]][1])
#if (length(t[[1]])) == 1) {
results[[i]][2]= as.numeric(t[[1]][2])
}
return(results)
}
results <- SplitCol(data$X2007)
SplitCol <- function(col){
x <- as.character(col)
n <- length(x)
results <- list(percentzge = numeric(n), comment = character(n))
for (i in 1:n)
{
t <- strsplit(x[i], split = ' ')
results[[i]][1]= as.numeric(t[[1]][1])
#if (length(t[[1]])) == 1) {
results[[i]][2]= t[[1]][2]
}
return(results)
}
results <- SplitCol(data$X2007)
SplitCol <- function(col){
x <- as.character(col)
n <- length(x)
results <- list(percentzge = numeric(n), comment = character(n))
for (i in 1:n)
{
t <- strsplit(x[i], split = ' ')
results[[1]][i]= as.numeric(t[[1]][1])
#if (length(t[[1]])) == 1) {
results[[2]][i]= t[[1]][2]
}
return(results)
}
results <- SplitCol(data$X2007)
results
if (1== 1) {print(1)}
SplitCol <- function(col){
x <- as.character(col)
n <- length(x)
results <- list(percentzge = numeric(n), comment = character(n))
for (i in 1:n)
{
t <- strsplit(x[i], split = ' ')
results[[1]][i]= as.numeric(t[[1]][1])
if (length(t[[1]]) == 2) {print(t)}
results[[2]][i]= t[[1]][2]
}
return(results)
}
results <- SplitCol(data$X2007)
SplitCol <- function(col){
x <- as.character(col)
n <- length(x)
results <- list(percentzge = numeric(n), comment = character(n))
for (i in 1:n)
{
t <- strsplit(x[i], split = ' ')
results[[1]][i]= as.numeric(t[[1]][1])
#if (length(t[[1]]) == 2) {print(t)}
results[[2]][i]= t[[1]][2]
}
return(results)
}
results <- SplitCol(data$X2007)
results
#for (i in data) {print(i)}
for (i in data) {print(i)}
results
for (i in data[2:,:]) {print(i)}
for (i in data[:,2:]) {print(i)}
type(data)
mode(data)
data.name
data
names(data)
names(data[1])
results
df_number = data.frame()
df_letter = data.frame()
for (i in data) {
if (names(i) != "unit.sectperf.geo.time") {
results <- SplitCol(i)
df_number[names(i)] = results$percentzge
df_letter[names(i)] = results$comment
}
}
if (names(data[[2]]) != "unit.sectperf.geo.time") {print('es')}
if (names(data[[2]]) == "unit.sectperf.geo.time") {print('es')}
names(data[[2]])
names(data[[1]])
data
data[0]
data
data[,1]
if (names(data[,2]) == "unit.sectperf.geo.time") {print('es')}
for (i in data)
{print(names(i))}
for (i in data)
{print(i}
for (i in data)
{print(i)}
sapple(data,SplitCol)
sapply(data,SplitCol)
lapply(data,splitCol)
lapply(data,SplitCol)
lapply(data[,2:],SplitCol)
data[,2]
df_number = data.frame()
df_letter = data.frame()
results = unlist(lapply(data,SplitCol))
results
df_number = data.frame()
df_letter = data.frame()
results = lapply(data,SplitCol)
results
df_number = data.frame()
df_letter = data.frame()
results = lapply(data,SplitCol)
for (i in results) {
print(i)
break
}
df_number = data.frame()
df_letter = data.frame()
results = lapply(data,SplitCol)
i <- 1
for (r in results) {
if (i == 1){continue}
print(r)
break
}
df_number = data.frame()
df_letter = data.frame()
results = lapply(data,SplitCol)
i <- 1
for (r in results) {
if (i == 1){next}
print(r)
break
}
df_number = data.frame()
df_letter = data.frame()
results = lapply(data,SplitCol)
i <- 1
for (r in results) {
if (i == 1){next}
i <- i+1
print(r)
break
}
df_number = data.frame()
df_letter = data.frame()
results = lapply(data,SplitCol)
i <- 1
for (r in results) {
if (i == 1){
i <- i+1; next}
print(r)
break
}
df_number = data.frame()
df_letter = data.frame()
results = lapply(data,SplitCol)
col_name <- names(data)
i <- 1
for (r in results) {
if (i == 1){
i <- i+1; next}
df_number[col_name(i)] = r$percentzge
df_letter[col_name(i)] = r$comment
break
}
df_number = data.frame()
df_letter = data.frame()
results = lapply(data,SplitCol)
col_name <- names(data)
i <- 1
for (r in results) {
if (i == 1){
i <- i+1; next}
df_number[col_name[i]] = r$percentzge
df_letter[col_name[i]] = r$comment
break
}
results = lapply(data,SplitCol)
df_number = data.frame()
df_letter = data.frame()
col_name <- names(data)
i <- 1
for (r in results) {
if (i == 1){
i <- i+1; next}
df_number[col_name[i]] = r$percentzge
df_letter[col_name[i]] = r$comment
break
}
df_number = data.frame()
df_letter = data.frame()
col_name <- names(data)
i <- 1
for (r in results) {
if (i == 1){
i <- i+1; next}
df_number[,col_name[i]] = r$percentzge
df_letter[,col_name[i]] = r$comment
break
}
df_number = data.frame(Doubles=double())
df_letter = data.frame()
col_name <- names(data)
i <- 1
for (r in results) {
if (i == 1){
i <- i+1; next}
df_number[,col_name[i]] = r$percentzge
df_letter[,col_name[i]] = r$comment
break
}
results
dim(data)
data[,1]
data[,2]
dim(results)
mode
mode(results)
results[1]
do.call(rbind, results)
do.call(cbind, results)
do.call(rbind, results)
a <- do.call(rbind, results)
a
type(a)
mode(a)
a[1]
a[2]
results[,2:]
results[,-1]
results[,1]
results[1]
results[-1]
do.call(rbind, results[-1])
a <- do.call(rbind, results[-1])
type(a)
mode(a)
a[1]
a[2]
dim(a)
class(a)
a[1,1]
a[1,2]
results = lapply(data,SplitCol)
a <- do.call(rbind, results[-1])
df_number <- a[,1]
df_letter <- a[,2]
df_letter
class(df_letter)
mode(df_letter)
df_letter <- as.data.frame(df_letter)
df_number <- as.data.frame(df_number)
df_letter
class(df_letter)
results = lapply(data,SplitCol)
a <- do.call(rbind, results[-1])
df_number <- a[,1]
df_letter <- a[,2]
percentages <- as.data.frame(df_letter)
annotation <- as.data.frame(df_number)
percentages
tidy_dat <- data.frame('sector' = sector,
'geo' = geo,
'percentages' = percentages,
'annotation' = annotation)
tidy_dat
Z=(140 - 125)/sqrt(62.5)
alpha=seq(0.005,0.1,0.005)
K=qnorm(1-alpha/2)
print(cbind(alpha,K,Z>K))
n=135
p=60/135
Z=(60 - n*p)/sqrt(n*p*(1-p)) # compute the Z statistic
pvalue=2*pnorm(-abs(Z),0,1)
pvalue
n=135
p=0.5
Z=(60 - n*p)/sqrt(n*p*(1-p)) # compute the Z statistic
pvalue=2*pnorm(-abs(Z),0,1)
pvalue
p = 0.5
z =(7 - 20*p)/sqrt(n*p*(1-p))
c_score = -pnorm(-0.05)
p_value <- 2*qnorm(z)
p
z
c_score
p = 0.5
z =(7 - 20*p)/sqrt(n*p*(1-p))
c_score = -pnorm(0.05)
p_value <- 2*qnorm(z)
p
z
c_score
p_value
p = 0.5
z =(7 - 20*p)/sqrt(n*p*(1-p))
c_score = -pnorm(0.05)
p_value <- 2*qnorm(z)
p_value
qnorm(-5)
p = 0.5
z =(7 - 20*p)/sqrt(n*p*(1-p))
c_score = -qnorm(0.05)
p_value <- 2*pnorm(z)
z
c_score
p_value
p = 0.5
n = 20
z =(7 - n*p)/sqrt(n*p*(1-p))
c_score = -qnorm(0.05)
p_value <- 2*pnorm(z)
p = 0.5
n = 20
z =(7 - n*p)/sqrt(n*p*(1-p)) #-1.34
c_score = -qnorm(0.05) #1.64
p_value <- 2*pnorm(z) #0.18
p=7/n
L=p + qnorm(0.05)*sqrt(p*(1-p)/n)
U=p - qnorm(0.05)*sqrt(p*(1-p)/n)
prop.test(7,n,conf.level=0.9,correct=F)
p = 1/3
n = 20
z =(7 - n*p)/sqrt(n*p*(1-p)) #-1.34
c_score = -qnorm(0.05) #1.64
p_value <- 2*pnorm(z) #0.18
p=7/n
L=p + qnorm(0.05)*sqrt(p*(1-p)/n)
U=p - qnorm(0.05)*sqrt(p*(1-p)/n)
p = 1/3
n = 20
z =(7 - n*p)/sqrt(n*p*(1-p)) #0.158
c_score = -qnorm(0.05) #1.64
p_value <- 2*pnorm(-z) #0.18
p=7/n
L=p + qnorm(0.05)*sqrt(p*(1-p)/n)
U=p - qnorm(0.05)*sqrt(p*(1-p)/n)
p = 0.5
n = 20
z =(7 - n*p)/sqrt(n*p*(1-p)) #-1.34
c_score = -qnorm(0.1) #1.64
p_value <- pnorm(z) #0.18
p=7/n
L=p + qnorm(0.05)*sqrt(p*(1-p)/n)
U=p - qnorm(0.05)*sqrt(p*(1-p)/n)
p = 0.5
n = 20
z =(7 - n*p)/sqrt(n*p*(1-p)) #-1.34
c_score = -qnorm(0.1) #1.28
p_value <- 1-pnorm(z)
p=7/n
L=p + qnorm(0.05)*sqrt(p*(1-p)/n)
U=p - qnorm(0.05)*sqrt(p*(1-p)/n)
p = 0.5
n = 20
z =(7 - n*p)/sqrt(n*p*(1-p)) #-1.34
c_score = -qnorm(0.1) #1.28
p_value <- 1-pnorm(z)
p=7/n
L=p + qnorm(0.1)*sqrt(p*(1-p)/n)
U=p - qnorm(0.05)*sqrt(p*(1-p)/n)
p = 0.5
n = 20
z =(7 - n*p)/sqrt(n*p*(1-p)) #-1.34
c_score = -qnorm(0.1) #1.28
p_value <- 1-pnorm(z)
p=7/n
L=p + qnorm(0.1)*sqrt(p*(1-p)/n)
U=1
prop.test(x,n,conf.level=0.9,correct=F,alternative=’greater’)
prop.test(x,n,conf.level=0.9,correct=F,alternative='greater')
prop.test(7,n,conf.level=0.9,correct=F,alternative='greater')
n1=250; x1=140; p1=x1/n1
n2=20; x2=7; p2=x2/n2
prop.test(c(x1,x2),c(n1,n2),conf.level=0.9,correct=FALSE)
n1=250; x1=140; p1=x1/n1
n2=20; x2=7; p2=x2/n2
prop.test(c(x1,x2),c(n1,n2),conf.level=0.95,correct=FALSE)
pchisq(2.7,1
)
x=c(983,1041,1026,1025,1033,968,1028); n=length(x)
x=c(983,1041,1026,1025,1033,968,1028); n=length(x)
z=sqrt(n)*(mean(x)-1000)/25
K = qnorm(0.975)
x=c(983,1041,1026,1025,1033,968,1028); n=length(x)
K = qnorm(0.975) * 25/ sqrt(n)
K
x=c(983,1041,1026,1025,1033,968,1028); n=length(x)
K = qnorm(0.975) * 25/ sqrt(n)
pnorm(1000-K, 980,25/ sqrt(n))+1-pnorm(1000+K, 980,25/ sqrt(n))
mu=950:1050
power=pnorm(1000-K, mu,25/ sqrt(n))+1-pnorm(1000+K, mu,25/ sqrt(n)) plot(mu,power,type='l',ylim=c(0,1))
mu=950:1050
power=pnorm(1000-K, mu,25/ sqrt(n))+1-pnorm(1000+K, mu,25/ sqrt(n))
plot(mu,power,type='l',ylim=c(0,1))
abline(h=0.05)
