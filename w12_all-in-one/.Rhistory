# install.packages("tidyverse")
# library(tidyerse)
data(starwars)
starwars %>% class()
starwars %>% dim()
install.packages("tidyverse")
library(tidyerse)
data(starwars)
starwars %>% class()
starwars %>% dim()
install.packages("tidyverse")
#install.packages("tidyverse")
library(tidyerse)
data(starwars)
starwars %>% class()
starwars %>% dim()
library(magrittr, lib.loc = "/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
starwars
starwars %>% as.data.frame() # old school data.frame
starwars
library(tidyverse)
starwars
load("./0_data/Calls_minutes_pm.RData")
load("./0_data/Traffic_MB.RData")
load("./0_data/Phone_data.RData")
Phone_data
load("./0_data/Phone_calltime.RData")
call_time <- Calls_minutes_pm %>%
unite(in_out_type, In_Out, Type) %>%
gather(key = "Month", value = "Value", one_of(month.name), na.rm = TRUE) %>%
spread(in_out_type, Value)
View(call_time)
library("tidyverse")
?tbl_dh
?tbl_df
data(hflights)
library(hflights)
install.packages("hflights")
library(hflights)
flights <- as_tibble(data(hflights))
flights
data(hflights)
hflights
flights <- as_tibble(hflights)
flights
?pivot_longer
?subset
library("tidyverse")
load("./0_data/Calls_minutes_pm.RData")
load("./0_data/Traffic_MB.RData")
load("./0_data/Phone_data.RData")
Phone_data
load("~/GitHub/15 Statistical Computing with R/w12_all-in-one/0_data/Phone_calltime.RData")
View(Phone_calltime)
names(Phone_calltime)
View(Calls_minutes_pm)
Phone_calltime2 <- Calls_minutes_pm2 %>% select("ID" , "Group" , "Month" ,
"Incoming_Domestic" ,"Incoming_Foreign" , "Incoming_Mum",
"Outgoing_Domestic", "Outgoing_Foreign" , "Outgoing_Mum" )
Phone_calltime2 <- Calls_minutes_pm %>% select("ID" , "Group" , "Month" ,
"Incoming_Domestic" ,"Incoming_Foreign" , "Incoming_Mum",
"Outgoing_Domestic", "Outgoing_Foreign" , "Outgoing_Mum" )
Phone_calltime2 <- Calls_minutes_pm %>% pivot_longer(cols = April:Sepetember,
names_to = "Month",
values_to = 'time')
Phone_calltime2 <- Calls_minutes_pm %>% pivot_longer(cols = April:September,
names_to = "Month",
values_to = 'time')
View(Phone_calltime2)
Phone_calltime2 <- Calls_minutes_pm %>%
pivot_longer(cols = April:September, names_to = "Month", values_to = 'time') %>%
pivot_wider(id_cols = ID:Month, names_from = 'Type', values_from = 'time')
call_time <- Calls_minutes_pm %>%
unite(in_out_type, In_Out, Type) %>%
call_time <- Calls_minutes_pm %>%
unite(in_out_type, In_Out, Type)
View(call_time)
one_of(month.name)
month.name
View(Traffic_MB)
load("~/GitHub/15 Statistical Computing with R/w12_all-in-one/.RData")
load("~/GitHub/15 Statistical Computing with R/w12_all-in-one/0_data/Phone_traffic.RData")
View(Phone_traffic)
traffic <- Traffic_MB %>%
unite(type_network, Up_Down, Network, sep = "")
View(traffic)
traffic <- Traffic_MB %>%
unite(type_network, Up_Down, Network, sep = "") %>%
gather(key = "Type", value = "Value", -ID, -Group, -Month, -type_network) %>% unite(combined_type, Type, type_network)
traffic <- Traffic_MB %>%
unite(type_network, Up_Down, Network, sep = "") %>%
gather(key = "Type", value = "Value", -ID, -Group, -Month, -type_network)
traffic <- Traffic_MB %>%
unite(type_network, Up_Down, Network, sep = "") %>%
gather(key = "Type", value = "Value", -ID, -Group, -Month, -type_network) %>% unite(combined_type, Type, type_network) %>%
spread(combined_type, Value)
traffic <- Traffic_MB %>%
unite(type_network, Up_Down, Network, sep = "") %>%
gather(key = "Type", value = "Value", -ID, -Group, -Month, -type_network) %>% unite(combined_type, Type, type_network) %>%
spread(combined_type, Value) %>%
select_if(~ any(!is.na(.x)))
traffic2 <- Traffic_MB %>%
unite(type_network, Up_Down, Network, sep = "") %>%
gather(key = "Type", value = "Value", -ID, -Group, -Month, -type_network) %>% unite(combined_type, Type, type_network) %>%
spread(combined_type, Value)  %>% na.omit(.)
traffic2 <- Traffic_MB %>%
unite(type_network, Up_Down, Network, sep = "") %>%
gather(key = "Type", value = "Value", -ID, -Group, -Month, -type_network) %>% unite(combined_type, Type, type_network) %>%
spread(combined_type, Value)  %>% na.omit()
traffic <- Traffic_MB %>%
unite(type_network, Up_Down, Network, sep = "") %>%
gather(key = "Type", value = "Value", -ID, -Group, -Month, -type_network) %>% unite(combined_type, Type, type_network) %>%
spread(combined_type, Value)
ÔºÅis.na(c(NA,1,2))
!is.na(c(NA,1,2))
any(!is.na(c(NA,1,2)))
any(!is.na(c(NA,BA)))
any(!is.na(c(NA,NA)))
~any(!is.na(c(NA,NA)))
traffic <- Traffic_MB %>%
unite(type_network, Up_Down, Network, sep = "") %>%
gather(key = "Type", value = "Value", -ID, -Group, -Month, -type_network) %>% unite(combined_type, Type, type_network) %>%
spread(combined_type, Value) %>%
select_if(~ any(!is.na(.x)))
traffic2 <- Traffic_MB %>%
unite(type_network, Up_Down, Network, sep = "") %>%
gather(key = "Type", value = "Value", -ID, -Group, -Month, -type_network) %>% unite(combined_type, Type, type_network) %>%
spread(combined_type, Value)
View(traffic2)
load("./0_data/Phone_means.RData")
load("./0_data/Phone_calltime.RData")
call_time <- Calls_minutes_pm %>%
unite(in_out_type, In_Out, Type) %>%
gather(key = "Month", value = "Value", one_of(month.name), na.rm = TRUE) %>%
spread(in_out_type, Value)
load("./0_data/Phone_traffic.RData")
traffic <- Traffic_MB %>%
unite(type_network, Up_Down, Network, sep = "") %>%
gather(key = "Type", value = "Value", -ID, -Group, -Month, -type_network) %>%
unite(combined_type, Type, type_network) %>%
spread(combined_type, Value) %>%
select_if(~ any(!is.na(.x))) %>%
# `~any(!is.na(.x))` is equal to `function(x) any(!is.na(x))`
mutate(Month = month.name[Month])
phone_data_full <- inner_join(call_time, traffic, by = c("ID", "Group", "Month"))
# if not specified, the keys on which to join are selected automatically
# based on overlapping colnames. (i.e., here we could omit the `by` argument.)
phone_data_full %>% all_equal(Phone_data)
phone_data_full %>%
group_by(Group, ID)
phone_means_aggr <- phone_data_full %>%
group_by(Group, ID) %>%
summarise_at(vars(-Month), mean)
View(phone_means_aggr)
phone_means_aggr <- phone_data_full %>%
group_by(Group, ID) %>%
summarise(vars(-Month), mean)
transf_data <- data.frame(
cbind(
expand.grid(Objects = 1:60, Variables = 1:36),
Value = rep(rep(c(+1.2, 0, -1.2), each = 20), 36)
))
View(transf_data)
P <- 36 ;N <- 60 ;B <- 10
data.frame(cbind(expand.grid(Objects = 1:N, Variables = 1:P)))
data.frame(cbind(expand.grid(Objects = 1:2, Variables = 1:3)))
expand.grid(Objects = 1:2, Variables = 1:3)
rep(rep(c(+1.2, 0, -1.2), each = 20), 36) + rnorm(P * N)
rep(rep(c(+1.2, 0, -1.2), each = 2), 2) + rnorm(2 * 3)
rnorm(2 * 3)
rep(rep(c(+1.2, 0, -1.2), each = 2), 2)
seq(60)
