set.seed(438734587)
ComputeD <- function(x, y, z){
x * (y - (z - 1/4)^2)
}
N <- 10
power_mean <- 5
power_sd <- 0.5
angle_a <- 10
angle_b <- 10
precision_left <- 9
precision_right <- 11
power_samples <- rnorm(N, power_mean, power_sd)
angle_samples <- rbeta(N, angle_a, angle_b)*(pi/2)
precision_samples <- runif(N, precision_left, precision_right)
distance <- ComputeD(power_samples, precision_samples, angle_samples)
mean(distance)
# mimicing second student:
set.seed(12314454)
power_samples <- rnorm(N, power_mean, power_sd)
angle_samples <- rbeta(N, angle_a, angle_b)*(pi/2)
precision_samples <- runif(N, precision_left, precision_right)
distance_colleague <- ComputeD(power_samples, precision_samples, angle_samples)
mean(distance_colleague)
N <- 10
many_means <- replicate(1000, expr = {
power_samples <- rnorm(N, power_mean, power_sd)
angle_samples <- rbeta(N, angle_a, angle_b)*(pi/2)
precision_samples <- runif(N, precision_left, precision_right)
distance_colleague <- ComputeD(power_samples, precision_samples, angle_samples)
return(mean(distance_colleague))
})
# there's quite some difference in what the average throwing distance is.
mean(many_means)
var(many_means)
hist(many_means, breaks="FD", col='lightgreen')
N <- 1000
many_means <- replicate(1000, expr = {
power_samples <- rnorm(N, power_mean, power_sd)
angle_samples <- rbeta(N, angle_a, angle_b)*(pi/2)
precision_samples <- runif(N, precision_left, precision_right)
distance_colleague <- ComputeD(power_samples, precision_samples, angle_samples)
return(mean(distance_colleague))
})
mean(many_means)
var(many_means)
N <- 1000
many_means <- replicate(1000, expr = {
power_samples <- rnorm(N, power_mean, power_sd)
angle_samples <- rbeta(N, angle_a, angle_b)*(pi/2)
precision_samples <- runif(N, precision_left, precision_right)
distance_colleague <- ComputeD(power_samples, precision_samples, angle_samples)
return(mean(distance_colleague))
})
mean(many_means)
var(many_means)
hist(many_means, breaks="FD", col='lightgreen')
set.seed(4444)
N <- 64
alpha <- 0.05
sampleA <- rnorm(N,3,1)
sampleB <- rnorm(N,2.5,1)
diff <- sampleA- sampleB
diff_mu <- mean(diff)
diff_sd <- std(diff)
set.seed(4444)
N <- 64
alpha <- 0.05
sampleA <- rnorm(N,3,1)
sampleB <- rnorm(N,2.5,1)
diff <- sampleA- sampleB
diff_mu <- mean(diff)
diff_sd <- sd(diff)
beta <- mean((diff>0+qt(alpha/2,N-1)) & (diff<0+qt(1-alpha/2,N-1)) )
# hypothesis mu=0, ture=0.5
beta
diff_mu
set.seed(4444)
N <- 64
alpha <- 0.05
sampleA <- rnorm(N,3,1)
sampleB <- rnorm(N,2.5,1)
diff <- sampleA- sampleB
diff_mu <- mean(diff)
diff_sd <- sd(diff)
beta <- mean((diff_mu>0+qt(alpha/2,N-1)) & (diff_mu<0+qt(1-alpha/2,N-1)) )
# hypothesis mu=0, ture=0.5
beta
set.seed(4444)
N <- 64
alpha <- 0.05
many_means <- replicate(1000, expr = {
sampleA <- rnorm(N,3,1)
sampleB <- rnorm(N,2.5,1)
diff <- sampleA- sampleB
return(mean(diff))
})
#diff_mu <-
#diff_sd <- sd(diff)
#beta <- mean((diff_mu>0+qt(alpha/2,N-1)) & (diff_mu<0+qt(1-alpha/2,N-1)) )
many_means
set.seed(4444)
N <- 64
alpha <- 0.05
many_means <- replicate(1000, expr = {
sampleA <- rnorm(N,3,1)
sampleB <- rnorm(N,2.5,1)
diff <- sampleA- sampleB
return(mean(diff))
})
diff_sd <- sd(many_means)
beta <- mean((diff_mu>0+qt(alpha/2,N-1)*diff_sd) & (diff_mu<0+qt(1-alpha/2,N-1)*diff_sd) )
beta
set.seed(4444)
N <- 64
alpha <- 0.05
many_means <- replicate(1000, expr = {
sampleA <- rnorm(N,3,1)
sampleB <- rnorm(N,2.5,1)
diff <- sampleA- sampleB
return(mean(diff))
})
diff_sd <- sd(many_means)
beta <- mean((many_means>0+qt(alpha/2,N-1)*diff_sd) & (many_means<0+qt(1-alpha/2,N-1)*diff_sd) )
beta
set.seed(4444)
N <- 64
alpha <- 0.05
many_means <- replicate(1000, expr = {
sampleA <- rnorm(N,3,1)
sampleB <- rnorm(N,2.5,1)
diff <- sampleA- sampleB
return(mean(diff))
})
diff_sd <- sd(many_means)
beta <- mean((many_means>(0+qt(alpha/2,N-1)*diff_sd)) & (many_means<(0+qt(1-alpha/2,N-1)*diff_sd)) )
beta
qt(0.5,N-1)
qt(0.025,N-1)
set.seed(4444)
k <- 10000
matA <- matrix(rnorm(64 * k, 2, 1), nrow = 64)
matB <- matrix(rnorm(64 * k, 1.5, 1), nrow = 64)
pval <- numeric(k)
for (i in 1:k){
pval[i] <- t.test(matA[ ,i], matB[ ,i])$p.value
}
sum(pval < 0.05) / k
set.seed(4444)
N <- 64
alpha <- 0.05
many_means <- replicate(1000, expr = {
sampleA <- rnorm(N,2,1)
sampleB <- rnorm(N,1.5,1)
diff <- sampleA- sampleB
return(mean(diff))
})
diff_sd <- sd(many_means)
beta <- mean((many_means>(0+qt(alpha/2,N-1)*diff_sd)) & (many_means<(0+qt(1-alpha/2,N-1)*diff_sd)) )
beta
set.seed(4444)
N <- 64
alpha <- 0.05
many_means <- replicate(1000, expr = {
sampleA <- rnorm(N,2,1)
sampleB <- rnorm(N,1.5,1)
diff <- sampleA- sampleB
return(mean(diff))
})
diff_sd <- sd(many_means)
beta <- mean((many_means>(0+qt(alpha/2,N-1)*diff_sd)) & (many_means<(0+qt(1-alpha/2,N-1)*diff_sd)) )
beta
set.seed(4444)
N <- 64
alpha <- 0.05
many_means <- replicate(1000, expr = {
sampleA <- rnorm(N,2,1)
sampleB <- rnorm(N,1.5,1)
diff <- sampleA - sampleB
return(mean(diff))
})
diff_sd <- sd(many_means)
beta <- mean((many_means>(0+qt(alpha/2,N-1)*diff_sd)) & (many_means<(0+qt(1-alpha/2,N-1)*diff_sd)) )
set.seed(44445)
N <- 64
alpha <- 0.05
many_means <- replicate(1000, expr = {
sampleA <- rnorm(N,2,1)
sampleB <- rnorm(N,1.5,1)
diff <- sampleA - sampleB
return(mean(diff))
})
diff_sd <- sd(many_means)
beta <- mean((many_means>(0+qt(alpha/2,N-1)*diff_sd)) & (many_means<(0+qt(1-alpha/2,N-1)*diff_sd)) )
set.seed(44445)
N <- 64
alpha <- 0.05
many_means <- replicate(10000, expr = {
sampleA <- rnorm(N,2,1)
sampleB <- rnorm(N,1.5,1)
diff <- sampleA - sampleB
return(mean(diff))
})
diff_sd <- sd(many_means)
beta <- mean((many_means>(0+qt(alpha/2,N-1)*diff_sd)) & (many_means<(0+qt(1-alpha/2,N-1)*diff_sd)) )
set.seed(1105)
B <- 1000
N1 <- matrix(rchisq(B * 10, df = 10), nrow = 10)
N2 <- matrix(rchisq(B * 100, df = 10), nrow = 100)
N3 <- matrix(rchisq(B * 1000, df = 10), nrow = 1000)
mc_data <- list(N1 = N1, N2 = N2, N3 = N3)
est_se <- lapply(mc_data, function(X){
sd(colMeans(X))
})
View(est_se)
exp_df <- 10; N_e1 <- 10; N_e2 <- 100; N_e3 <- 1000
true_se <- round(c( N1 = sqrt(2*exp_df/N_e1),
N2 = sqrt(2*exp_df/N_e2),
N3 = sqrt(2*exp_df/N_e3)
), 3)
paste0("N", 1:3, " = ", true_se)
est_se <- round(unlist(est_se), 3)
paste0("N", 1:3, " = ", est_se)
?round
round(0.5)
round(0.52)
round(0.523)
round(0.523,2)
?rchisq
N_10nc <- matrix(rchisq(B*N_e1, df = 10, ncp = lmbd), nrow = N_e1)
set.seed(1105)
B <- 1000
N1 <- matrix(rchisq(B * 10, df = 10), nrow = 10)
N2 <- matrix(rchisq(B * 100, df = 10), nrow = 100)
N3 <- matrix(rchisq(B * 1000, df = 10), nrow = 1000)
mc_data <- list(N1 = N1, N2 = N2, N3 = N3)
est_se <- lapply(mc_data, function(X){
sd(colMeans(X))
})
exp_df <- 10; N_e1 <- 10; N_e2 <- 100; N_e3 <- 1000
true_se <- round(c( N1 = sqrt(2*exp_df/N_e1),
N2 = sqrt(2*exp_df/N_e2),
N3 = sqrt(2*exp_df/N_e3)
), 3)
paste0("N", 1:3, " = ", true_se)
par(mfrow= c(1, 3))
for(n in 1:length(mc_data)){
hist(colMeans(mc_data[[n]]),
main = paste("Xbars for N = ",
nrow(mc_data[[n]]), sep = ""),
xlab = " Xbars from Chi-square (df = 10) ",
xlim = c(4,16)
)
}
par(mfrow = c(1,1))
paste('1',1
)
cate('1',1 )
cat('1',1 )
cat('1',1,5,'5')
lmbd <- 5;
true_se <- round(c( N1 = sqrt((2 * exp_df + 4 * lmbd)/N_e1),
N2 = sqrt((2 * exp_df + 4 * lmbd)/N_e2),
N3 = sqrt((2 * exp_df + 4 * lmbd)/N_e3)
), 3
)
paste0("N", 1:3, " = ", true_se)
lmbd <- 5;
true_se <- round(c( N1 = sqrt((2 * exp_df + 4 * lmbd)/N_e1),
N2 = sqrt((2 * exp_df + 4 * lmbd)/N_e2),
N3 = sqrt((2 * exp_df + 4 * lmbd)/N_e3)
), 3
)
paste0("N", 1:3, " = ", true_se)
N_10nc <- matrix(rchisq(B*N_e1, df = 10, ncp = lmbd), nrow = N_e1)
N_100nc <- matrix(rchisq(B*N_e2, df = 10, ncp = lmbd), nrow = N_e2)
N_1000nc <- matrix(rchisq(B*N_e3, df = 10, ncp = lmbd), nrow = N_e3)
mc_ncdata <- list(N1 = N_10nc, N2 = N_100nc, N3 = N_1000nc)
est_ncse <- do.call(c, lapply(mc_ncdata, function(X){
sd(colMeans(X))
}))
N_10nc <- matrix(rchisq(B*N_e1, df = 10, ncp = lmbd), nrow = N_e1)
N_100nc <- matrix(rchisq(B*N_e2, df = 10, ncp = lmbd), nrow = N_e2)
N_1000nc <- matrix(rchisq(B*N_e3, df = 10, ncp = lmbd), nrow = N_e3)
mc_ncdata <- list(N1 = N_10nc, N2 = N_100nc, N3 = N_1000nc)
do.call(c, lapply(mc_ncdata, function(X){
sd(colMeans(X))
}))
c
?c
cat('a','b')
paste('a','b')
do.call(c,c('a','b'))
lapply(mc_data, function(X){
sd(colMeans(X))
})
do.call(c,lapply(mc_data, function(X){
sd(colMeans(X))
}))
x<- c(0.5,1,0.2)
t.test(x,mu=1000)
t.test(x,mu=1)
?sim
sim(100)
sim <- function(nreps) {
commdata <- list()  # will store all our info about the 3 committees
commdata$countabsamecomm <- 0
for (rep in 1:nreps) {
commdata$whosleft <- 1:20  # who's left to choose from
commdata$numabchosen <- 0  # number among A, B chosen so far
# choose committee 1, and check for A,B serving together
commdata <- choosecomm(commdata,5)
# if A or B already chosen, no need to look at the other comms.
if (commdata$numabchosen > 0) next
# choose committee 2 and check
commdata <- choosecomm(commdata,4)
if (commdata$numabchosen > 0) next
# choose committee 3 and check
commdata <- choosecomm(commdata,3)
}
print(commdata$countabsamecomm/nreps)
}
choosecomm <- function(comdat,comsize) {
# choose committee
committee <- sample(comdat$whosleft,comsize)
# count how many of A and B were chosen
comdat$numabchosen <- length(intersect(1:2,committee))
if (comdat$numabchosen == 2)
comdat$countabsamecomm <- comdat$countabsamecomm + 1
# delete chosen committee from the set of people we now have to choose from
comdat$whosleft <- setdiff(comdat$whosleft,committee)
return(comdat)
}
sim(100)
N <- 50
df <- 5
x <- seq(0, 20, by = 0.01)
plot(x, dchisq(x, df = df), type = 'l')
plot(x, dchisq(x, df = df), type = 'l')
set.seed(5674)
B <- 50
# theoretically:
variance <- df*2
Z <- replicate(B, mean(rchisq(N, df = df)))
# error of sampling distribution of Z_bar:
sqrt(sum((Z-mean(Z))^2)/B)
# simulation error of mean
sqrt(1/B * sum((Z-mean(Z))^2)/B)
monte_carlo_replications <- 100
sd(replicate(monte_carlo_replications, {
Z <- replicate(B, mean(rchisq(N, df = df)))
mean(Z)
}))
trunc(0.3 * 5)
trunc(0.3 * 10)
x <- c(-3.2, -1.8, 2.3, 2.9)
floor(x);
trunc(x)
gendata <- function(es, nsamp, k){
#function that generates data
#
#Args:
#es = standardized difference in population means
#nsamp = number of observations in our sample
#k = number of samples
#population A is our "control" group population
meanA <- 2
matA <- matrix(rnorm(nsamp * k, meanA, 1), nrow = nsamp)
#Population B is our "intervention" group population
matB <- matrix(rnorm(nsamp * k, meanA - es, 1), nrow = nsamp)
#We combine the data in a list object with pairs of columns,
#one column from matA and one from matB.
listobj <- lapply(1:k, function(i){
cbind(matA[ ,i], matB[ ,i])
})
return(listobj)
}
gendata(2,100,5)
str(gendata(2,100,5))
set.seed(4444)
es <- c(0.20, 0.50, 0.80)
nsamp <- 800
datasmall <- gendata(es[1], nsamp, 1000)
datamed <- gendata(es[2], nsamp, 1000)
datalarge <- gendata(es[3], nsamp, 1000)
ttestp <- function(X, n) {
# function that returns p-value of indep samples t-test
#
# Args:
#   X: matrix with observations in the rows, and the
#     two samples in the (two) columns.
#   n: number of observations we select
#
tobj <- t.test(X[1:n, 1], X[1:n, 2])
return(tobj$p.value)
}
samplesize <- function(nobs, listobj, powercrit = 0.80){
#function to determin the minimumn sample size for a critical power   level
#Args:
#   nobs: a vector with possible values for n
#   listobj: list with pairs of observations from 2 populations
#   powercrit: the critical power level
power <- 0
i <- 1
while (power < powercrit){
i <- i + 1
pval <- sapply(listobj, ttestp, n = nobs[i])
#calculate the power:
power <- sum(pval < 0.05)/length(pval)
#follow the output:
print(c(nobs[i], power))
}
return(nobs[i])
}
ntot <- nrow(datasmall[[1]])
#Vector nobs with large intervals:
nobs <- seq(1, ntot, by = 50)
nminrough <- samplesize(nobs, datasmall, powercrit = 0.80)
#Vector nobs with small intervals:
nobs <- seq(nminrough - 20, nminrough, by = 1)
nminsmall80 <- samplesize(nobs, datasmall, powercrit = 0.80)
nminsmall80
