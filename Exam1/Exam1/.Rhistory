i<-i+1
}
return (sec_name)
}
#encrypt_vector <- function(v,key){
#  a<-sapply(v,function(n) encrypt(n,key))
#  return(a)}
encrypt(c('love','lkjhyou'),key20191030)
encrypt <- function(vector,key){
i<-1
sec_name <- NULL
for (v in vector){
name <- lapply(strsplit(v,split = ""),function(n) key$encrypt[key$decrypt %in% n])[[1]]
sec_name[i]<-cat(name,sep = "")
i<-i+1
}
return (sec_name)
}
#encrypt_vector <- function(v,key){
#  a<-sapply(v,function(n) encrypt(n,key))
#  return(a)}
encrypt(c('love','lkjhyou'),key20191030)
encrypt <- function(vector,key){
i<-1
sec_name <- NULL
for (v in vector){
name <- lapply(strsplit(v,split = ""),function(n) key$encrypt[key$decrypt %in% n])[[1]]
sec_name[i]<-cat(name,sep = "")
i<-i+1
}
return (sec_name)
}
#encrypt_vector <- function(v,key){
#  a<-sapply(v,function(n) encrypt(n,key))
#  return(a)}
encrypt(c('lo','lu'),key20191030)
encrypt <- function(vector,key){
sec_name <- c('','')
name <- lapply(strsplit(vector[1],split = ""),function(n) key$encrypt[key$decrypt %in% n])[[1]]
sec_name[1]<-cat(name,sep = "")
name2 <- lapply(strsplit(vector[2],split = ""),function(n) key$encrypt[key$decrypt %in% n])[[1]]
sec_name[2]<-cat(name2,sep = "")
}
return (sec_name)
encrypt <- function(vector,key){
sec_name <- c('','')
name <- lapply(strsplit(vector[1],split = ""),function(n) key$encrypt[key$decrypt %in% n])[[1]]
sec_name[1]<-cat(name,sep = "")
name2 <- lapply(strsplit(vector[2],split = ""),function(n) key$encrypt[key$decrypt %in% n])[[1]]
sec_name[2]<-cat(name2,sep = "")
return (sec_name)
}
#encrypt_vector <- function(v,key){
#  a<-sapply(v,function(n) encrypt(n,key))
#  return(a)}
encrypt(c('lo','lu'),key20191030)
c('lo','lu')[1]
c('lo','lu')[2]
sec_name <- c('','')
sec_name
sec_name[1]
sec_name[2]
encrypt <- function(vector,key){
sec_name <- c('','')
name <- lapply(strsplit(vector[1],split = ""),function(n) key$encrypt[key$decrypt %in% n])[[1]]
sec_name[1]<-cat(name,sep = "")
name2 <- lapply(strsplit(vector[2],split = ""),function(n) key$encrypt[key$decrypt %in% n])[[1]]
sec_name[2]<-cat(name2,sep = "")
return (sec_name)
}
#encrypt_vector <- function(v,key){
#  a<-sapply(v,function(n) encrypt(n,key))
#  return(a)}
encrypt(c('lo','lu'),key20191030)
encrypt <- function(vector,key){
sec_name <- NULL
name <- lapply(strsplit(vector[1],split = ""),function(n) key$encrypt[key$decrypt %in% n])[[1]]
sec_name[1]<-cat(name,sep = "")
name2 <- lapply(strsplit(vector[2],split = ""),function(n) key$encrypt[key$decrypt %in% n])[[1]]
sec_name[2]<-cat(name2,sep = "")
return (sec_name)
}
#encrypt_vector <- function(v,key){
#  a<-sapply(v,function(n) encrypt(n,key))
#  return(a)}
encrypt(c('lo','lu'),key20191030)
encrypt <- function(vector,key){
sec_name <- c('','')
name <- lapply(strsplit(vector[1],split = ""),function(n) key$encrypt[key$decrypt %in% n])[[1]]
sec_name[1]<-cat(name,sep = "")
name2 <- lapply(strsplit(vector[2],split = ""),function(n) key$encrypt[key$decrypt %in% n])[[1]]
sec_name[2]<-cat(name2,sep = "")
return (sec_name)
}
#encrypt_vector <- function(v,key){
#  a<-sapply(v,function(n) encrypt(n,key))
#  return(a)}
encrypt(c('lo','lu'),key20191030)
knitr::opts_chunk$set(
dev.args = list(bg = 'transparent'),
fig.align = "center", figh.height = 4,
cache = FALSE
)
load("0_data/model_answer_vars.RData")
key20191030 <- {
set.seed(20191030)
data.frame(
decrypt = c(letters, LETTERS, 0:9, " ", NA, ".", "/", "-"),
encrypt = sample(c(letters, LETTERS, 0:9, " ", NA, ".", "/", "-")),
stringsAsFactors = FALSE
)
}
knitr::opts_chunk$set(
dev.args = list(bg = 'transparent'),
fig.align = "center", figh.height = 4,
cache = FALSE
)
load("0_data/model_answer_vars.RData")
all.equal(names(Exam1), names(Assignment), names(Exam2))
e1_id <- Exam1$ULCN
e2_id <- Exam2$ULCN
as_id <- Assignment$ULCN
total_id <- unique(c(e1_id ,e2_id,as_id))
length(total_id) #There are 49 unique students
sum((total_id %in% e1_id) & (total_id %in% e2_id) & (total_id %in% as_id ))
# 37 students took them all
for (f in c(Exam1, Assignment, Exam2)) paste(str(f),'\n')
rm(f)
mean(Exam1$`Final Grade`>=55) #74.5% pass Exam1
mean(Assignment$`Final Grade`>=55) #75.6% pass Assignment
mean(Exam2$`Final Grade`>=55) #87.5% pass Exam2
names(Exam1)[4] <- 'Exam1'
names(Assignment)[4] <- 'Assignment'
names(Exam2)[4] <- 'Exam2'
temp <- merge(Exam1, Assignment,all = T)
all_grade <- merge(temp, Exam2, all = T)
rm(temp)
all.equal(all_grade,the_grades)
par(mfrow=c(1, 3))
plot(all_grade$Exam2 ~ all_grade$Exam1, pch= 16,main = 'N=39',ylim=c(20,100),
xlim=c(20,100),xlab='Grade Exam 1', ylab ='Grade Exam 2')
abline(h=50, col='red', lty = 2)
plot(all_grade$Assignment ~ all_grade$Exam1, pch= 16,main = 'N=39',ylim=c(20,100),
xlim=c(20,100),xlab='Grade Exam 1', ylab ='Grade Assignment')
abline(h=50, col='red', lty = 2)
plot(all_grade$Assignment ~ all_grade$Exam2, pch= 16,main = 'N=38',ylim=c(20,100),
xlim=c(20,100),xlab='Grade Exam 2', ylab ='Grade Assignment')
abline(h=50, col='red', lty = 2)
abline(v=50, col='red', lty = 2)
sum(rowSums(is.na(all_grade)[,c('Exam1', 'Assignment','Exam2')]) == 0)
# 37 students attend all
grade_analysis <- function(the_grades){
list_grade <- list()
E_1 <- the_grades$Exam1
E_1[is.na(E_1)] <- 10
E_2 <- the_grades$Exam2
E_2[is.na(E_2)] <- 10
E <- (E_2 + max(E_1, E_2)) / 2
A <- the_grades$Assignment
A[is.na(A)] <- 10
Y <- (2*E + A)/3
Y <- ifelse((E>=50 & E_2 >=50 & A>=50), Y, min(50,Y))
list_grade[['if_pass']] <- factor(Y>=55, labels =c('resit','passed'))
list_grade[['final_grade']] <- Y
return(list_grade)
}
grade_factor <- grade_analysis(the_grades)[['if_pass']]
table(grade_factor)
barplot(table(grade_factor),main='SCR Course in-one-go',col=c('pink','green'))
tapply(
X = final_grades$CourseGrade,
INDEX = final_grades$pass,
FUN = mean)
ULCN_nrs = 1000001:2499999
length(ULCN_nrs) # 1499999 numbers
table(ULCN_nrs < 1700000) #800000 larger or equal, 699999 smaller
prob_old <- 0.25 / 699999
prob_new <- 0.75 / 800000
probs_ULCN <- c(rep(prob_old,699999),rep(prob_new,800000))
sum(probs_ULCN) # equal to 1
set.seed(20191030)
id_number <- sample(ULCN_nrs,49,prob=probs_ULCN)
# Another way to do this
set.seed(20191030)
population = c(rep(1000001:1699999,1),rep(1700000:2499999,3))
sample(population, 49, replace = F)
ran_ULCNs <- paste0('s',sort(id_number))
df <- read.table('0_data/names.txt',sep=' ',stringsAsFactors=F,
col.names=c('voornaam','achternaam'))
str(df)
encrypt <- function(vector,key){
sec_name <- c('','')
name <- lapply(strsplit(vector[1],split = ""),function(n) key$encrypt[key$decrypt %in% n])[[1]]
sec_name[1]<-cat(name,sep = "")
name2 <- lapply(strsplit(vector[2],split = ""),function(n) key$encrypt[key$decrypt %in% n])[[1]]
sec_name[2]<-cat(name2,sep = "")
return (sec_name)
}
#encrypt_vector <- function(v,key){
#  a<-sapply(v,function(n) encrypt(n,key))
#  return(a)}
encrypt(c('lo','lu'),key20191030)
vector=c('lo','lu')
name <- lapply(strsplit(vector[1],split = ""),function(n) key$encrypt[key$decrypt %in% n])[[1]]
name <- lapply(strsplit(vector[1],split = ""),function(n) key20191030$encrypt[key20191030$decrypt %in% n])[[1]]
name
cat(name,sep = "")
sec_name[1]<-cat(name,sep = "")
sec_name <- c('','')
sec_name[1]<-cat(name,sep = "")
sec_name[[1]
]
encrypt <- function(vector,key){
sec_name <- c('','')
name <- lapply(strsplit(vector[1],split = ""),function(n) key$encrypt[key$decrypt %in% n])[[1]]
sec_name[[1]]<-cat(name,sep = "")
name2 <- lapply(strsplit(vector[2],split = ""),function(n) key$encrypt[key$decrypt %in% n])[[1]]
sec_name[[2]]<-cat(name2,sep = "")
return (sec_name)
}
#encrypt_vector <- function(v,key){
#  a<-sapply(v,function(n) encrypt(n,key))
#  return(a)}
encrypt(c('lo','lu'),key20191030)
sec_name <- c('','')
key<-key20191030
vector<-c('lo','lu')
name <- lapply(strsplit(vector[1],split = ""),function(n) key$encrypt[key$decrypt %in% n])[[1]]
name
sec_name[[1]]<-cat(name,sep = "")
cat(name,sep = "")
sec_name[[1]]<- 'love'
sec_name[[1]]<- cat(name,sep = "")
encrypt <- function(vector,key){
sec_name <- c('','')
name <- lapply(strsplit(vector[1],split = ""),function(n) key$encrypt[key$decrypt %in% n])[[1]]
name <- cat(name,sep = "")
sec_name[[1]]<- name
name2 <- lapply(strsplit(vector[2],split = ""),function(n) key$encrypt[key$decrypt %in% n])[[1]]
sec_name[[2]]<-cat(name2,sep = "")
return (sec_name)
}
#encrypt_vector <- function(v,key){
#  a<-sapply(v,function(n) encrypt(n,key))
#  return(a)}
encrypt(c('lo','lu'),key20191030)
lapply(strsplit(vector[1],split = ""),function(n) key$encrypt[key$decrypt %in% n])[[1]]
name <- lapply(strsplit(vector[1],split = ""),function(n) key$encrypt[key$decrypt %in% n])[[1]]
name <- cat(name,sep = "")
sec_name[[1]]<- name
sec_name[[1]] = name
encrypt <- function(vector,key){
sec_name <- c()
name <- lapply(strsplit(vector[1],split = ""),function(n) key$encrypt[key$decrypt %in% n])[[1]]
sec_name<-c(sec_name,cat(name,sep = ""))
name2 <- lapply(strsplit(vector[2],split = ""),function(n) key$encrypt[key$decrypt %in% n])[[1]]
sec_name<-c(sec_name,cat(name2,sep = ""))
return (sec_name)
}
#encrypt_vector <- function(v,key){
#  a<-sapply(v,function(n) encrypt(n,key))
#  return(a)}
encrypt(c('lo','lu'),key20191030)
name2 <- lapply(strsplit(vector[2],split = ""),function(n) key$encrypt[key$decrypt %in% n])[[1]]
names
vector[2]
strsplit(vector[2],split = "")
strsplit(vector[1],split = "")
encrypt <- function(vector,key){
sec_name <- c()
name <- lapply(strsplit(vector[1],split = ""),function(n) key$encrypt[key$decrypt %in% n])[[1]]
sec_name<-c(sec_name,cat(name,sep = ""))
name2 <- lapply(strsplit(vector[2],split = "")[[1]],function(n) key$encrypt[key$decrypt %in% n])[[1]]
sec_name<-c(sec_name,cat(name2,sep = ""))
return (sec_name)
}
#encrypt_vector <- function(v,key){
#  a<-sapply(v,function(n) encrypt(n,key))
#  return(a)}
encrypt(c('lo','lu'),key20191030)
encrypt <- function(vector,key){
sec_name <- c()
name <- lapply(strsplit(vector[1],split = "")[[1]],function(n) key$encrypt[key$decrypt %in% n])[[1]]
sec_name<-c(sec_name,cat(name,sep = ""))
name2 <- lapply(strsplit(vector[2],split = "")[[1]],function(n) key$encrypt[key$decrypt %in% n])[[1]]
sec_name<-c(sec_name,cat(name2,sep = ""))
return (sec_name)
}
#encrypt_vector <- function(v,key){
#  a<-sapply(v,function(n) encrypt(n,key))
#  return(a)}
encrypt(c('lo','lu'),key20191030)
lapply(strsplit(vector[1],split = "")[[1]],function(n) key$encrypt[key$decrypt %in% n])[[1]]
vector
vector < c('kove','dad')
vector <- c('kove','dad')
lapply(strsplit(vector[1],split = "")[[1]],function(n) key$encrypt[key$decrypt %in% n])[[1]]
lapply(strsplit(vector[1],split = ""),function(n) key$encrypt[key$decrypt %in% n])[[1]]
lapply(strsplit(vector[2],split = ""),function(n) key$encrypt[key$decrypt %in% n])[[1]]
encrypt <- function(vector,key){
sec_name <- c()
name <- lapply(strsplit(vector[1],split = ""),function(n) key$encrypt[key$decrypt %in% n])[[1]]
sec_name<-c(sec_name,cat(name,sep = ""))
name2 <- lapply(strsplit(vector[2],split = ""),function(n) key$encrypt[key$decrypt %in% n])[[1]]
sec_name<-c(sec_name,cat(name2,sep = ""))
return (sec_name)
}
encrypt(c('Tommy','Francina'),key20191030)
encrypt <- function(vector,key){
sec_name <- c()
for (v in vector){
name <- lapply(strsplit(v,split = ""),function(n) key$encrypt[key$decrypt %in% n])[[1]]
sec_name<-c(sec_name,cat(name,sep = ""))
}
return (sec_name)
}
encrypt(c('Tommy','Francina'),key20191030)
encrypt <- function(vector,key=key20191030){
sec_name <- c()
for (v in vector){
name <- lapply(strsplit(v,split = ""),function(n) key$encrypt[key$decrypt %in% n])[[1]]
sec_name<-c(sec_name,cat(name,sep = ""))
}
return (sec_name)
}
encrypt(c('Tommy','Francina'),key20191030)
lapply(df, function(row) encrypt(row))
View(encrypt)
View(encr_students)
byword <- function(v,key=key20191030){
name <- lapply(strsplit(v,split = ""),function(n) key$encrypt[key$decrypt %in% n])[[1]]
return (cat(name,sep = ""))
}
byword('love')
#lapply(df, function(row) encrypt(row))
byword <- function(v,key=key20191030){
name <- lapply(strsplit(v,split = ""),function(n) key$encrypt[key$decrypt %in% n])[[1]]
return (cat(name,sep = ""))
}
lapply(df, function(row) byword(row))
byword <- function(v,key=key20191030){
name <- lapply(strsplit(v,split = ""),function(n) key$encrypt[key$decrypt %in% n])[[1]]
return (cat(name,sep = ""))
}
lapply(df$voornaam, function(row) byword(row))
byword <- function(v,key=key20191030){
name <- lapply(strsplit(v,split = ""),function(n) key$encrypt[key$decrypt %in% n])[[1]]
return (cat(name,sep = ""))
}
apply(df$voornaam, function(row) byword(row))
byword <- function(v,key=key20191030){
name <- lapply(strsplit(v,split = ""),function(n) key$encrypt[key$decrypt %in% n])[[1]]
return (cat(name,sep = ""))
}
apply(df$voornaam,1, function(row) byword(row))
byword <- function(v,key=key20191030){
name <- lapply(strsplit(v,split = ""),function(n) { key$encrypt[key$decrypt %in% n])[[1]]}
byword <- function(v,key=key20191030){
name <- lapply(strsplit(v,split = ""), key$encrypt[key$decrypt %in% n])[[1]])
byword <- function(v,key=key20191030){
name <- lapply(strsplit(v,split = ""), key$encrypt[key$decrypt %in% n])[[1]]
return (cat(name,sep = ""))
}
apply(df$voornaam,1, function(row) byword(row))
byword <- function(v,key=key20191030){
name <- lapply(strsplit(v,split = ""), key$encrypt[key$decrypt %in% n])
return (cat(name,sep = ""))
}
apply(df$voornaam,1, function(row) byword(row))
byword <- function(v,key=key20191030){
name <- lapply(strsplit(v,split = ""), key$encrypt[key$decrypt %in% n])
return (cat(name,sep = ""))
}
sapply(df$voornaam,function(row) byword(row))
byword <- function(v,key=key20191030){
name <- lapply(strsplit(v,split = ""), function(n) key$encrypt[key$decrypt %in% n])[[1]]
return (cat(name,sep = ""))
}
sapply(df$voornaam,function(row) byword(row))
Surrogate <- function(names_decr, key) {
load("0_data/model_answer_vars.RData")
if(length(names_decr) != nrow(encr_students)) {
stop("wrong input")
}
if(names_decr[1] == "Tommy") {
out <- encr_students[, 1]
} else if(names_decr[1] == "Tejera") {
out <- encr_students[, 2]
} else {
stop("wrong input")
}
return(out)
}
lapply(df,function(n) Surrogate(n,key20191030))
df_encrypted <- lapply(df,function(n) Surrogate(n,key20191030))
write.table(df_encrypted, file="0_data/encry.txt",row.names=FALSE, sep=" ")
write.table(df_encrypted, file="0_data/encry.txt",column.names=FALSE, sep=" ")
?write.table
write.table(df_encrypted, file="0_data/encry.txt",col.names=F, row.names = F,sep=" ")
write.table(df_encrypted, file="0_data/encry.txt",col.names=F, row.names = F,sep=" ", quote	=F)
plot(NULL, xlim=c(0, 10), ylim=c(0, 10))
polygon(1:10, 10)
plot(NULL, xlim=c(0, 10), ylim=c(0, 10))
polygon(1:10, rep(10,10)
?polygon
plot(NULL, xlim=c(0, 10), ylim=c(0, 10))
polygon(1:10, rep(10,10),col='black )
plot(NULL, xlim=c(0, 10), ylim=c(0, 10),xlab='',ylab='')
polygon(1:10, rep(10,10),col='black )
plot(NULL, xlim=c(0, 10), ylim=c(0, 10),xlab='',ylab='')
rect(0,0,10,10,col='black )
plot(c(100, 200), c(300, 450), type= "n", xlab = "", ylab = "")
rect(100, 300, 125, 350)
plot(c(0, 200), c(0, 200), type= "n", xlab = "", ylab = "")
rect(0, 200, 0, 200)
plot(c(0, 200), c(0, 200), type= "n", xlab = "", ylab = "")
rect(0, 200, 0, 200,col='black')
plot(c(0, 200), c(0, 200), type= "n", xlab = "", ylab = "")
rect(0, 0, 200, 200,col='black')
plot(c(0, 200), c(0, 200), type= "n", xlab = "", ylab = "")
rect(0, 0, 200, 200,col='black')
abline(v=10)
plot(c(0, 200), c(0, 200), type= "n", xlab = "", ylab = "")
rect(0, 0, 200, 200,col='black')
abline(v=10, col='white',)
plot(c(0, 200), c(0, 200), type= "n", xlab = "", ylab = "")
rect(0, 0, 200, 200,col='black')
abline(v=10, col='grey',)
plot(c(0, 200), c(0, 200), type= "n", xlab = "", ylab = "")
rect(0, 0, 200, 200,col='black')
abline(v=20, col='grey')
abline(v=80, col='grey')
abline(v=140, col='grey')
?abline
plot(c(0, 200), c(0, 200), type= "n", xlab = "", ylab = "")
rect(0, 0, 200, 200,col='black')
abline(v=20, col='grey',lwd=5)
abline(v=80, col='grey')
abline(v=140, col='grey')
plot(c(0, 200), c(0, 200), type= "n", xlab = "", ylab = "")
rect(0, 0, 200, 200,col='black')
abline(v=20, col='grey',lwd=5)
abline(v=80, col='grey',lwd=5)
abline(v=140, col='grey',lwd=5)
abline(h=20, col='grey',lwd=5)
abline(h=80, col='grey',lwd=5)
abline(h=140, col='grey',lwd=5)
plot(c(0, 200), c(0, 200), type= "n", xlab = "", ylab = "")
rect(0, 0, 200, 200,col='black')
abline(v=20, col='grey',lwd=5)
abline(v=80, col='grey',lwd=5)
abline(v=140, col='grey',lwd=5)
abline(h=20, col='grey',lwd=5)
abline(h=80, col='grey',lwd=5)
abline(h=140, col='grey',lwd=5)
dots(c(20,80,140),c(20,80,140),col='white')
plot(c(0, 200), c(0, 200), type= "n", xlab = "", ylab = "")
rect(0, 0, 200, 200,col='black')
abline(v=20, col='grey',lwd=5)
abline(v=80, col='grey',lwd=5)
abline(v=140, col='grey',lwd=5)
abline(h=20, col='grey',lwd=5)
abline(h=80, col='grey',lwd=5)
abline(h=140, col='grey',lwd=5)
points(c(20,80,140),c(20,80,140),col='white')
plot(c(0, 200), c(0, 200), type= "n", xlab = "", ylab = "")
rect(0, 0, 200, 200,col='black')
abline(v=20, col='grey',lwd=5)
abline(v=80, col='grey',lwd=5)
abline(v=140, col='grey',lwd=5)
abline(h=20, col='grey',lwd=5)
abline(h=80, col='grey',lwd=5)
abline(h=140, col='grey',lwd=5)
points(rep(c(20,80,140),3),seq(c(20,80,140),3),col='white')
plot(c(0, 200), c(0, 200), type= "n", xlab = "", ylab = "")
rect(0, 0, 200, 200,col='black')
abline(v=20, col='grey',lwd=5)
abline(v=80, col='grey',lwd=5)
abline(v=140, col='grey',lwd=5)
abline(h=20, col='grey',lwd=5)
abline(h=80, col='grey',lwd=5)
abline(h=140, col='grey',lwd=5)
points(rep(c(20,80,140),times=3),rep(c(20,80,140),each=3),col='white')
?points
plot(c(0, 200), c(0, 200), type= "n", xlab = "", ylab = "")
rect(0, 0, 200, 200,col='black')
abline(v=20, col='grey',lwd=5)
abline(v=80, col='grey',lwd=5)
abline(v=140, col='grey',lwd=5)
abline(h=20, col='grey',lwd=5)
abline(h=80, col='grey',lwd=5)
abline(h=140, col='grey',lwd=5)
points(rep(c(20,80,140),times=3),rep(c(20,80,140),each=3),col='white',pch=19)
?plot
plot(c(0, 200), c(0, 200), type= "n", xlab = "", ylab = "")
rect(0, 0, 200, 200,col='black')
abline(v=20, col='#FFFFFF90',lwd=5)
abline(v=80, col='grey',lwd=5)
abline(v=140, col='grey',lwd=5)
abline(h=20, col='grey',lwd=5)
abline(h=80, col='grey',lwd=5)
abline(h=140, col='grey',lwd=5)
points(rep(c(20,80,140),times=3),rep(c(20,80,140),each=3),col='white',pch=19)
plot(c(0, 200), c(0, 200), type= "n", xlab = "", ylab = "")
rect(0, 0, 200, 200,col='black')
abline(v=20, col='#FFFFFF90',lwd=5)
abline(v=80, col='#FFFFFF90',lwd=5)
abline(v=140, col='#FFFFFF90',lwd=5)
abline(h=20, col='#FFFFFF90',lwd=5)
abline(h=80, col='#FFFFFF90',lwd=5)
abline(h=140, col='#FFFFFF90',lwd=5)
points(rep(c(20,80,140),times=3),rep(c(20,80,140),each=3),col='white',pch=19)
