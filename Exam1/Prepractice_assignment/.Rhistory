?strsplit
strsplit('subject_Groningen: 1', split = '')
class(strsplit('subject_Groningen: 1', split = ''))
class(strsplit('subject_Groningen: 1', split = '')[[1]])
mode(strsplit('subject_Groningen: 1', split = '')[[1]])
mode(strsplit('subject_Groningen: 1', split = '')[[1]])
which(strsplit('subject_Groningen: 1', split = '')[[1]] = ':')
which(strsplit('subject_Groningen: 1', split = '')[[1]] == ':')
which(temp_string==":")
temp_string <- strsplit("subject_Groningen: 1", split="")[[1]]
which(temp_string==":")
mode(strsplit('subject_Groningen: 1', split = ':')[[1]])
strsplit('subject_Groningen: 1', split = ':')[[1]]
center_locations <- c("Groningen", "Leeuwarden", "Assen", "Zwolle", "Lelystad", "Arnhem", "Utrecht", "Haarlem", "Den Haag", "Middelburg", "'s-Hertogenbosch", "Maastricht")
n.centers <- length(center_locations)
center_abbreviated <- character(n.centers)
for (i in 1:n.centers){
center_abbreviated[i] <- tail(strsplit(center_locations[i], split="")[[1]], 1)
}
duplicated(center_abbreviated)
center_locations <- c("Groningen", "Leeuwarden", "Assen", "Zwolle", "Lelystad", "Arnhem", "Utrecht", "Haarlem", "Den Haag", "Middelburg", "'s-Hertogenbosch", "Maastricht")
center_locations
center_abbreviated <- character(n.centers)
center_abbreviated
strsplit(center_locations[i], split="")[[1]]
strsplit(center_locations[i], split="")[[1]][-1]
duplicated(strsplit(center_locations[i], split="")[[1]][-1])
tail(strsplit(center_locations[i], split="")[[1]][-1],1)
head(strsplit(center_locations[i], split="")[[1]][-1],1)
list_center_abbr <- list()
for (j in 2:6){
center.abbrevated <- character(n.centers)
for (i in 1:n.centers){
center_abbreviated[i] <- Stringtail(center_locations[i], j)
}
list_center_abbr[[j]] <- center_abbreviated
}
Stringtail <- function(x, a){
return(paste(tail(strsplit(x, split="")[[1]], a), collapse=""))
}
list_center_abbr <- list()
for (j in 2:6){
center.abbrevated <- character(n.centers)
for (i in 1:n.centers){
center_abbreviated[i] <- Stringtail(center_locations[i], j)
}
list_center_abbr[[j]] <- center_abbreviated
}
list_center_abbr <- list_center_abbr[-1]
list_center_abbr
list_center_abbr <- list(5)
for (j in 2:6){
center.abbrevated <- character(n.centers)
for (i in 1:n.centers){
center_abbreviated[i] <- Stringtail(center_locations[i], j)
}
list_center_abbr[[j]] <- center_abbreviated
}
list_center_abbr <- list_center_abbr[-1]
list_center_abbr
list_center_abbr[-1]
for (j in 2:6){duplicated(list_center_abbr[[j]] )}
for (j in 1:5){duplicated(list_center_abbr[[j]] )}
for (j in 1:5){duplicated(list_center_abbr[[j]] )}
for (j in 1:5){print(uplicated(list_center_abbr[[j]] ))}
for (j in 1:5){print(duplicated(list_center_abbr[[j]] ))}
for (j in 1:5){print(sum(duplicated(list_center_abbr[[j]] ))}
for (j in 1:5){print(sum(duplicated(list_center_abbr[[j]] )))}
location <- character(nrow(bloodsamples_data))
for (i in 1:nrow(bloodsamples_data)){
location[i] <- GetLocation(bloodsamples_data$bloodSampleID[i])
}
string <- bloodsamples_data[1, 1]
GetLocation <- function(string){
identifier_string <- strsplit(string, split=":")[[1]][1]
if (identifier_string == "subjectGroningen"){
center_location <- "Groningen"
} else if (identifier_string == "IDLeeuwarden") {
center_location <- "Leeuwarden"
} else if (identifier_string == "sIDAssen") {
center_location <- "Assen"
} else if (identifier_string == "persIDZwolle") {
center_location <- "Zwolle"
} else if (identifier_string == "subject_numberLelystad") {
center_location <- "Lelystad"
} else if (identifier_string == "sampleIDArnhem") {
center_location <- "Arnhem"
} else if (identifier_string == "subjectUtrecht") {
center_location <- "Utrecht"
} else if (identifier_string == "IDHaarlem") {
center_location <- "Haarlem"
} else if (identifier_string == "sIDDen Haag") {
center_location <- "Den Haag"
} else if (identifier_string == "persIDMiddelburg") {
center_location <- "Middelburg"
} else if (identifier_string == "subject_number's-Hertogenbosch") {
center_location <- "'s-Hertogenbosch"
} else if (identifier_string == "sampleIDMaastricht") {
center_location <- "Maastricht"
} else {
center_location <- "UNKNOWN"
}
return(center_location)
}
location <- character(nrow(bloodsamples_data))
for (i in 1:nrow(bloodsamples_data)){
location[i] <- GetLocation(bloodsamples_data$bloodSampleID[i])
}
location
bloodsamples_data$location <- location
p=seq(0.1,10,0.1); loglik <-3*log(p) + (p-1)*log(0.5*0.7*0.3)
plot(p,loglik)
log(0.5*0.7*0.3)
-3/ -2.253795
x<-rep(1000,rnom(25,0,3))
x<-rep(1000,rnorm(25,0,3))
x<-rep(1000,rnorm(25,mu = 0, sd = 3))
?rnorm
x<-rep(1000,rnorm(25,mean = 0, sd = 3))
rnorm(25,mean = 0, sd = 3)
x<-replicate(1000,rnorm(25,mean = 0, sd = 3))
apply(x,1,mean)
e1 <- apply(x,2,mean);e2 <- apply(x,2,median)
var(e1)/var(e2)
abline(v=1)
loglik
which.max(loglik)
p(13)
p[13]
abline(v=1.3)
?test
?ttest
?t.test
?integrate
?rexp
rexp(5,5)
dexp(4,5)
dexp(5,5)
pexp(0.5,5)
pexp(0.9,5)
pexp(1,5)
pexp(1,10)
pexp(1,20)
pexp(2,5)
pexp(3,5)
pexp(10,5)
pexp(15,5)
pnorm(0.5)
qnorm(-.5)
qnorm(0.5)
pexp(0.5,5)
pexp(0.5, rate =5)
pexp(0.5, rate = 0.1)
pexp(0.5, rate = 0.2)
pexp(0.5, rate = 0.15)
pexp(1, rate = 0.15)
pexp(5, rate = 0.2)
qexp(5, 0.2)
qnorm(0.5)
pexp(5, rate = 0.2)
qexp(0.5,0.2)
rexp(5,0.2)
dexp(5,0.2)
pexp(5,0.2)
pexp(6,0.2)
dexp(7,0.2)
dexp(8,0.2)
dexp(9,0.2)
dexp(10,0.2)
dexp(10.5,0.2)
dexp(10.4,0.2)
dexp(5.4,0.2)
knitr::opts_chunk$set(echo = TRUE)
lamda <- seq(0,10,0.1)
lik<- dexp(5.2, lamda)*dexp(7.8, lamda)*dexp(6.3, lamda)*(pexp(8, lamda, lower.tail= F)**2)
plot(lamda, lik, type='l', col='red')
lamda <- seq(0,1,0.1)
lik<- dexp(5.2, lamda)*dexp(7.8, lamda)*dexp(6.3, lamda)*(pexp(8, lamda, lower.tail= F)**2)
plot(lamda, lik, type='l', col='red')
lamda <- seq(0,1,0.01)
lik<- dexp(5.2, lamda)*dexp(7.8, lamda)*dexp(6.3, lamda)*(pexp(8, lamda, lower.tail= F)**2)
plot(lamda, lik, type='l', col='red')
lamda <- seq(0,1,0.001)
lik<- dexp(5.2, lamda)*dexp(7.8, lamda)*dexp(6.3, lamda)*(pexp(8, lamda, lower.tail= F)**2)
plot(lamda, lik, type='l', col='red')
lamda <- seq(0,1,0.001)
lik<- dexp(5.2, lamda)*dexp(7.8, lamda)*dexp(6.3, lamda)*(pexp(8, lamda, lower.tail= F)**2)
plot(lamda, lik, type='l', col='red')
lamda_hat <- lamda(which.max(lik))
lamda <- seq(0,1,0.001)
lik<- dexp(5.2, lamda)*dexp(7.8, lamda)*dexp(6.3, lamda)*(pexp(8, lamda, lower.tail= F)**2)
plot(lamda, lik, type='l', col='red')
lamda_hat <- lamda[which.max(lik)]
abline(v=lamda_hat)
lamda <- seq(0,1,0.001)
lik<- dexp(5.2, lamda)*dexp(7.8, lamda)*dexp(6.3, lamda)*(pexp(8, lamda, lower.tail= F)**2)
plot(lamda, lik, type='l', col='red')
lamda_hat <- lamda[which.max(lik)]
abline(v=lamda_hat, col='pink')
?abline
lamda <- seq(0,1,0.001)
lik<- dexp(5.2, lamda)*dexp(7.8, lamda)*dexp(6.3, lamda)*(pexp(8, lamda, lower.tail= F)**2)
plot(lamda, lik, type='l', col='pink')
lamda_hat <- lamda[which.max(lik)]
abline(v=lamda_hat, col='red')
lamda <- seq(0,1,0.001)
lik<- dexp(5.2, lamda)*dexp(7.8, lamda)*dexp(6.3, lamda)*(pexp(8, lamda, lower.tail= F)**2)
plot(lamda, lik, type='l', col='pink')
lamda_hat <- lamda[which.max(lik)]
abline(v=lamda_hat, col='red')
print('MLE estimator using R is',lamda_hat  )
lamda <- seq(0,1,0.001)
lik<- dexp(5.2, lamda)*dexp(7.8, lamda)*dexp(6.3, lamda)*(pexp(8, lamda, lower.tail= F)**2)
plot(lamda, lik, type='l', col='pink')
lamda_hat <- lamda[which.max(lik)]
abline(v=lamda_hat, col='red')
cat('MLE estimator using R is',lamda_hat  )
1/0.085
5.2+8+7.8+6.3+8
plot(lamda, lamda**3 * exp(-35.3*lamda)
)
x< - c(3.66,2.9,1.52,-2.52,3.83,1.75,4.01,0.63,2.51,3.94)
x <- c(3.66,2.9,1.52,-2.52,3.83,1.75,4.01,0.63,2.51,3.94)
x <- c(3.66,2.9,1.52,-2.52,3.83,1.75,4.01,0.63,2.51,3.94)
x_mu <- mean(x)
x_var <- var(x)
x <- c(3.66,2.9,1.52,-2.52,3.83,1.75,4.01,0.63,2.51,3.94)
x_mu <- mean(x)
x_var <- var(x)
alpha <- 0.05
x <- c(3.66,2.9,1.52,-2.52,3.83,1.75,4.01,0.63,2.51,3.94)
x_mu <- mean(x)
x_var <- var(x)
n <- len(x)
x <- c(3.66,2.9,1.52,-2.52,3.83,1.75,4.01,0.63,2.51,3.94)
x_mu <- mean(x)
x_var <- var(x)
n <- length(x)
alpha <- 0.05
t_statistic <- (x_mu - 1)/sqrt(x_var/n)
t_statistic <- (x_mu - 1)/sqrt(x_var/n)
cat('t_statistic:',t_statistic)
t_statistic <- (x_mu - 1)/sqrt(x_var/n)
cat('t_statistic:',t_statistic)
critical_value <- qt(1-alpha/2,n-1)
cat('critical_value:',critical_value)
t_statistic <- (x_mu - 1)/sqrt(x_var/n)
cat('t_statistic:',t_statistic,'\n)
critical_value <- qt(1-alpha/2,n-1)
cat('critical_value:',critical_value)
t_statistic <- (x_mu - 1)/sqrt(x_var/n)
cat('t_statistic:',t_statistic,'\n')
critical_value <- qt(1-alpha/2,n-1)
cat('critical_value:',critical_value)
t_statistic <- abs((x_mu - 1)/sqrt(x_var/n))
cat('t_statistic:',t_statistic,'\n')
critical_value <- qt(1-alpha/2,n-1)
cat('critical_value:',critical_value)
p_value <-  2*(1 - pt(t_statistic,n-1))
p_value <-  2*(1 - pt(t_statistic,n-1))
cat('alpha:',alpha,'\n')
cat('p_value :',p_value )
t_statistic <- abs((x_mu - 1)/sqrt(x_var/n))
cat('t-statistic:',t_statistic,'\n')
critical_value <- qt(1-alpha/2,n-1)
cat('critical-value:',critical_value)
p_value <-  2*(1 - pt(t_statistic,n-1))
cat('alpha:',alpha,'\n')
cat('p-value :',p_value )
ci <- x_mu + t(c(alpha/2,1-alpha/2),n-1) * sqrt(x_var/n)
ci <- x_mu + tq(c(alpha/2,1-alpha/2),n-1) * sqrt(x_var/n)
ci <- x_mu + qt(c(alpha/2,1-alpha/2),n-1) * sqrt(x_var/n)
cat('Lower limit of the confidence Interval:',ci[1],'\n')
cat('Up limit of the confidence Interval :',ci[2] )
ci <- x_mu + qt(c(alpha/2,1-alpha/2),n-1) * sqrt(x_var/n)
cat('Lower limit of the confidence Interval of mu:',ci[1],'\n')
cat('Up limit of the confidence Interval of mu :',ci[2] )
ci <- 1 + qt(c(alpha/2,1-alpha/2),n-1) * sqrt(x_var/n)
cat('Lower limit of the confidence Interval of mu:',ci[1],'\n')
cat('Up limit of the confidence Interval of mu :',ci[2] )
sample <- c(8,9,10,8,3,12)
expected <- rep(50/6,6)
?chisq.test
chisq.test(sample,expected)
sample <- c(8,9,10,8,3,12)
expected <- rep(50/6,6)
chi_sqaure_satistic <- sum(sample-expected)**2/
sample <- c(8,9,10,8,3,12)
expected <- rep(50/6,6)
chi_sqaure_satistic <- sum(sample-expected)**2/expected)
sample <- c(8,9,10,8,3,12)
expected <- rep(50/6,6)
chi_sqaure_satistic <- sum((sample-expected)**2/expected)
chisq.test(sample,expected)
chisq.test(c(sample,expected))
sample <- c(8,9,10,8,3,12)
expected <- rep(50/6,6)
chisq_statistic <- sum((sample-expected)**2/expected)
cat('Chi-Square statistic is :',chisq_statistic)
# check with function
chisq.test(c(sample,expected))
sample <- c(8,9,10,8,3,12)
expected <- rep(50/6,6)
chisq_statistic <- sum((sample-expected)**2/expected)
cat('Chi-Square statistic is :',chisq_statistic)
cat('Check with function','\n')
chisq.test(c(sample,expected))
sample <- c(8,9,10,8,3,12)
expected <- rep(50/6,6)
chisq_statistic <- sum((sample-expected)**2/expected)
cat('Chi-Square statistic is :',chisq_statistic,'\n')
cat('Check with function\n')
chisq.test(c(sample,expected))
sample <- c(8,9,10,8,3,12)
expected <- rep(50/6,6)
chisq_statistic <- sum((sample-expected)**2/expected)
cat('Chi-Square statistic is :',chisq_statistic,'\n')
cat('Check with function:\n')
chisq.test(c(sample,expected))
sample <- c(8,9,10,8,3,12)
expected <- rep(50/6,6)
cat('The expected number of times are', expected,'\n')
chisq_statistic <- sum((sample-expected)**2/expected)
cat('Chi-Square statistic is :',chisq_statistic,'\n')
cat('Check with function:\n')
chisq.test(c(sample,expected))
?t.test
t_test(x,mu=1)
t.test(x,mu=1)
ci <- x_mu + qt(c(alpha/2,1-alpha/2),n-1) * sqrt(x_var/n)
cat('Lower limit of the confidence Interval of mu:',ci[1],'\n')
cat('Up limit of the confidence Interval of mu :',ci[2] )
# Confirm with the built-in function
t.test(x,mu=1)
sample <- c(8,9,10,8,3,12)
expected <- rep(50/6,6)
cat('The expected number of times are', expected,'\n')
chisq_statistic <- sum((sample-expected)**2/expected)
cat('Chi-Square statistic is :',chisq_statistic,'\n')
cat('Check with the built-in function:\n')
chisq.test(c(sample,expected))
sample <- c(8,9,10,8,3,12)
expected <- rep(50/6,6)
cat('The expected number of times are', expected,'\n')
chisq_statistic <- sum((sample-expected)**2/expected)
cat('Chi-Square statistic is :',chisq_statistic,'\n')
sample <- c(8,9,10,8,3,12)
expected <- rep(50/6,6)
cat('The expected number of times are', expected,'\n')
chisq_statistic <- sum((sample-expected)**2/expected)
cat('Chi-Square statistic is :',chisq_statistic)
# Confirm with the built-in function
chisq.test(c(sample,expected))
?pchisq
p_value <- pchisq(chisq_statistic,df = 5)
p_value <- pchisq(chisq_statistic,df = 5)
cat('p-value :',p_value )
# Confirm with the built-in function
test <- data.frame(sample,expected)
chisq.test(test)
(sample-expected)**2
(sample-expected)**2/expected
sum((sample-expected)**2/expected)
test
?chisq.test
# Confirm with the built-in function
test <- data.frame(sample,expected)
chisq.test(sample)
# Confirm with the built-in function
chisq.test(sample)
?pchisq
p_value <- pchisq(chisq_statistic,df = 5,lower.tail = F)
cat('p-value :',p_value )
p_value <- pchisq(chisq_statistic,df = 5,lower.tail = F)
cat('p-value :',p_value)
p0 <- rep(1/6,6)
test <- drop(rmultinom(1,50,prob=p0))
test
?rmultinom
p0 <- rep(1/6,6)
N <- 10000 # number of simulations
test <- rep(N,drop(rmultinom(1,50,prob=p0))
p0 <- rep(1/6,6)
N <- 10000 # number of simulations
test <- rep(N,drop(rmultinom(1,50,prob=p0)))
p0 <- rep(1/6,6)
N <- 10000 # number of simulations
test <- replicate(N,drop(rmultinom(1,50,prob=p0)))
View(test)
?Chisquare
p0 <- rep(1/6,6)
N <- 10000 # number of simulations
simulation <- replicate(N,drop(rmultinom(1,50,prob=p0)))
chi_sq <- function(sample) {
return(sum((sample-expected)**2/expected)))
p0 <- rep(1/6,6)
N <- 10000 # number of simulations
simulation <- replicate(N,drop(rmultinom(1,50,prob=p0)))
chi_sq <- function(sample) {
return(sum((sample-expected)**2/expected))
}
apply(simulation, 2, chi_sq)
p0 <- rep(1/6,6)
N <- 10000 # number of simulations
simulation <- replicate(N,drop(rmultinom(1,50,prob=p0)))
chi_sq <- function(sample) {
return(sum((sample-expected)**2/expected))
}
dist <- apply(simulation, 2, chi_sq)
p0 <- rep(1/6,6)
N <- 10000 # number of simulations
simulation <- replicate(N,drop(rmultinom(1,50,prob=p0)))
chi_sq <- function(sample) {
return(sum((sample-expected)**2/expected))
}
dist <- apply(simulation, 2, chi_sq)
p_value_simulation <- sum(chisq_statistic > dist)
p0 <- rep(1/6,6)
N <- 10000 # number of simulations
simulation <- replicate(N,drop(rmultinom(1,50,prob=p0)))
chi_sq <- function(sample) {
return(sum((sample-expected)**2/expected))
}
dist <- apply(simulation, 2, chi_sq)
p_value_simulation <- sum(chisq_statistic > dist)
cat('P-value from simulation is :',p_value_simulation)
p0 <- rep(1/6,6)
N <- 10000 # number of simulations
simulation <- replicate(N,drop(rmultinom(1,50,prob=p0)))
chi_sq <- function(sample) {
return(sum((sample-expected)**2/expected))
}
dist <- apply(simulation, 2, chi_sq)
p_value_simulation <- mean(chisq_statistic > dist)
cat('P-value from simulation is :',p_value_simulation)
p0 <- rep(1/6,6)
N <- 10000 # number of simulations
simulation <- replicate(N,drop(rmultinom(1,50,prob=p0)))
chi_sq <- function(sample) {
return(sum((sample-expected)**2/expected))
}
dist <- apply(simulation, 2, chi_sq)
p_value_simulation <- mean(chisq_statistic > dist)
cat('P-value from simulation is :',p_value_simulation)
p0 <- rep(1/6,6)
N <- 10000 # number of simulations
simulation <- replicate(N,drop(rmultinom(1,50,prob=p0)))
chi_sq <- function(sample) {
return(sum((sample-expected)**2/expected))
}
dist <- apply(simulation, 2, chi_sq)
p_value_simulation <- mean(dist > chisq_statistic)
cat('P-value from simulation is :',p_value_simulation)
p0 <- rep(1/6,6)
N <- 100000 # number of simulations
simulation <- replicate(N,drop(rmultinom(1,50,prob=p0)))
chi_sq <- function(sample) {
return(sum((sample-expected)**2/expected))
}
dist <- apply(simulation, 2, chi_sq)
p_value_simulation <- mean(dist > chisq_statistic)
cat('P-value from simulation is :',p_value_simulation)
lamda <- seq(0,1,0.001)
lik<- dexp(5.2, lamda)*dexp(7.8, lamda)*dexp(6.3, lamda)*(pexp(8, lamda, lower.tail= F)**2)
plot(lamda, lik, type='l', col='pink')
lamda_hat <- lamda[which.max(lik)]
abline(v=lamda_hat, col='red')
lamda_hat
t_statistic <- abs((x_mu - 1)/sqrt(x_var/n))
t_statistic
critical_value <- qt(1-alpha/2,n-1)
critical_value
p_value <-  2*(1 - pt(t_statistic,n-1))
alpha
p_value
ci <- x_mu + qt(c(alpha/2,1-alpha/2),n-1) * sqrt(x_var/n)
ci
sample <- c(8,9,10,8,3,12)
expected <- rep(50/6,6)
expected
chisq_statistic <- sum((sample-expected)**2/expected)
chisq_statistic
p_value <- pchisq(chisq_statistic,df = 5,lower.tail = F)
p_value
p0 <- rep(1/6,6)
N <- 100000 # number of simulations
simulation <- replicate(N,drop(rmultinom(1,50,prob=p0)))
chi_sq <- function(sample) {
return(sum((sample-expected)**2/expected))
}
dist <- apply(simulation, 2, chi_sq)
p_value_simulation <- mean(dist > chisq_statistic)
p_value_simulation
rand.seed(5)
?seed
rand_seed
eval(rand_seed)
p0 <- rep(1/6,6)
N <- 100000 # number of simulations
simulation <- replicate(N,drop(rmultinom(1,50,prob=p0)))
chi_sq <- function(sample) {
return(sum((sample-expected)**2/expected))
}
dist <- apply(simulation, 2, chi_sq)
p_value_simulation <- mean(dist > chisq_statistic)
p_value_simulation
list(10)
list(2,3)
vector(list,10)
vector(mode=list,10)
vector('list',2)
vector('numeric',5)
