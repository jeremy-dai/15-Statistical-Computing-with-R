install.packages("penalized")
?choose
choose(4,1)
choose(4,2)
lchoose(4,2)
choose(5,4)
knitr::opts_chunk$set(
dev.args = list(bg = 'transparent'),
fig.align = "center",
cache = FALSE
)
# install.packages("penalized")
all_students <- c("Xinru", "Ionica", "Elise", "Maryam", "Gina")
utils::combn(all_students,4)
?t
t(utils::combn(all_students,4))
factorial(5)
sample(all_students,replace = FALSE)
lapply(seq(1:4),sample(all_students,replace = FALSE))
replicate(sample(all_students,replace = FALSE)),4)
replicate(sample(all_students,replace = FALSE),4)
?replicate
replicate(4, sample(all_students,replace = FALSE))
sunsetcolor <- c("red", "orange", "yellow")
expand.grid(sunsetcolor, sunsetcolor)
list_args <- rep(list(all_students), 5)
rep(c(5,5),2
)
rep(list(5,5),2
)
list_args <- rep(list(all_students), 5)
all_possibs <- expand.grid(list_args)
all_possibs
x <- c("H", "T")
rep(x,3)
rep(list(x),3)
list_args <- rep(list(c(1,2,3,4)), 4)
expand.grid(list_args)
list_args <- rep(list(0:9), 4)
expand.grid(list_args)
list_args <- rep(list(0:9), 4)
sapply(expand.grid(list_args),paste0(collapse = ""))
expand.grid(list_args)[1]
t(expand.grid(list_args))[1]
t(expand.grid(list_args))
df <- expand.grid(list_args)
df
mode(df)
list_args <- rep(list(0:9), 4)
df <- expand.grid(list_args)
lapply(df,mean)
length(df)
list_args <- rep(list(0:9), 4)
df <- expand.grid(list_args)
apply(df,2,mean)
list_args <- rep(list(0:9), 4)
df <- expand.grid(list_args)
apply(df,1,mean)
list_args <- rep(list(0:9), 4)
df <- expand.grid(list_args)
apply(df,1,paste0())
list_args <- rep(list(0:9), 4)
df <- expand.grid(list_args)
apply(df,1,paste0(collapse = ""))
list_args <- rep(list(0:9), 4)
df <- expand.grid(list_args)
apply(df,1,paste0,collapse = "")
list_args <- rep(list(0:9), 4)
df <- expand.grid(list_args)
cardnumber <- apply(df,1,paste0,collapse = "")
set.seed(171123)
Truth <- rep(c("Milk", "Tea"), each = 1000)
choice_Lady <- Truth
MilkyChange_idx <- sample(1:1000, 200)
TeaChange_idx <- sample(1001:2000, 200)
choice_Lady[MilkyChange_idx] <- "Tea"
choice_Lady[TeaChange_idx] <- "Milk"
choice_Lady
rep(c("Milk", "Tea"), each = 4)
<- sample(1:1000, 200)
<- sample(1:1000, 200)
sample(1:1000, 200)
GetNrSuccesses <- function(choice, truth) {
sum("Milk" == choice & "Milk" == truth) # R recycling behavior trick
}
t_stat <- GetNrSuccesses(choice_Lady, Truth)
t_stat
b <- 5000
stat <- numeric(b)
for (i in 1:b){
stat[i] <- GetNrSuccesses(sample(choice_Lady), Truth)
}
stat
t_stat <- t.test(extra ~ group, data = sleep)
group
extra
sleep
t.test(extra ~ group, data = sleep)
sleep
sample(1:20,10)
index <- sample(1:20,10)
A <- sleep$extra[index]
index <- sample(1:20,10)
A <- sleep$extra[index]
B <- sleep$extra[~index]
index <- sample(1:20,10)
A <- sleep$extra[index]
B <- sleep$extra[~index]
index <- sample(1:20,10)
A <- sleep$extra[index]
B <- sleep$extra[-index]
sleep$extra
B
A
b<-1000
t_stat<-numeric(b)
for (i in 1:b){
index <- sample(1:20,10)
A <- sleep$extra[index]
B <- sleep$extra[-index]
t_stat[i] =  t.test(A,B)$statistic
}
t_stat
b<-1000
t_stat<-numeric(b)
tobs <- t.test(extra ~ group, data = sleep)
for (i in 1:b){
index <- sample(1:20,10)
A <- sleep$extra[index]
B <- sleep$extra[-index]
t_stat[i] =  t.test(A,B)$statistic
}
mean(abs(t_stat) < abs(tobs))
b<-1000
t_stat<-numeric(b)
tobs <- t.test(extra ~ group, data = sleep)$statistic
for (i in 1:b){
index <- sample(1:20,10)
A <- sleep$extra[index]
B <- sleep$extra[-index]
t_stat[i] =  t.test(A,B)$statistic
}
mean(abs(t_stat) < abs(tobs))
b<-10000
t_stat<-numeric(b)
tobs <- t.test(extra ~ group, data = sleep)$statistic
for (i in 1:b){
index <- sample(1:20,10)
A <- sleep$extra[index]
B <- sleep$extra[-index]
t_stat[i] =  t.test(A,B)$statistic
}
mean(abs(t_stat) < abs(tobs))
0.918+0.072
tobs
B <- 1000 # number of samples
tobs <- t.test(extra ~ group, data = sleep)$statistic Tprms <- numeric(B)
B <- 1000 # number of samples
tobs <- t.test(extra ~ group, data = sleep)$statistic
Tprms <- numeric(B)
for (b in 1:B) {
Tprms[b] <- t.test(extra ~ sample(group), data = sleep)$statistic }; rm(b)
p_estim1 <- mean(abs(tobs) < abs(Tprms)) # estimated p-value
B <- 1000 # number of samples
tobs <- t.test(extra ~ group, data = sleep)$statistic
Tprms <- numeric(B)
for (b in 1:B) {
Tprms[b] <- t.test(extra ~ sample(group), data = sleep)$statistic }; rm(b)
mean(abs(tobs) < abs(Tprms)) # estimated p-value
b<-10000
t_stat<-numeric(b)
tobs <- t.test(extra ~ group, data = sleep)$statistic
for (i in 1:b){
index <- sample(1:20,10)
A <- sleep$extra[index]
B <- sleep$extra[-index]
t_stat[i] =  t.test(A,B)$statistic
}
mean(abs(t_stat) > abs(tobs))
set.seed(160929)
mu <- 0.5
x <- rnorm(8) # sampling distr F
y <- rnorm(12, mu, 2) # sampling distr G
Get20TrimmedMean <- function(x,y) {
out <- mean(x, trim = 0.2) - mean(y, trim = 0.2)
return(out)
}
t_obs <- Get20TrimmedMean(x,y)
t_obs
utils::combn(1:3)
utils::combn(1:3,2)
utils::combn(1:20,8)
length(utils::combn(1:20,8))
# standard error of the regression
n<-length(x)
data <- Sahlins[c(1,5,10,15,20),]
library(car)
data <- Sahlins[c(1,5,10,15,20),]
x <- data$consumers
y <- data$acres
plot(x,y)
x_bar = mean(x)
y_bar = mean(y)
B=sum((x-x_bar)*(y-y_bar))/sum((x-x_bar)^2)
A=y_bar - B*x_bar
abline(A,B,col='pink')
# standard error of the regression
n<-length(x)
E <- sum((y - (A + B*x))^2)/(n-2)
SE <- sqrt(E)
# correlation coefficient
RSS <- sum((y - (A + B*x))^2)
TSS <- sum((y - y_bar)^2)
RegSS <- TSS - RSS
R2 <- RegSS/TSS
r <- sqrt(R2)
r_ =sum((x-x_bar)*(y-y_bar))/(sqrt(sum((x-x_bar)^2)*sum((y-y_bar)^2)))
FM <- lm(prestige ~ income + education , data=Duncan)
> RM <- lm(prestige ~ I(income + education) , data=Duncan)
FM <- lm(prestige ~ income + education , data=Duncan)
RM <- lm(prestige ~ I(income + education) , data=Duncan)
F <- ((deviance(RM) - deviance(FM))/1)/(deviance(FM)/df.residual(FM))
(Pval <- 1-pf(F,1,df.residual(FM)))
?read.csv
knitr::opts_chunk$set(
dev.args = list(bg = 'transparent'),
fig.align = "center",
cache = FALSE
)
# install.packages("penalized")
set.seed(190933)
mu <- 1.75
x <- rnorm(30)
y <- rnorm(30, mu, 2)
Get20TrimmedMean <- function(x,y) mean(x, trim = 0.2) - mean(y, trim = 0.2)
t_obs <- Get20TrimmedMean(x,y)
t_obs
N <- 20; m <- 8
all_combs <- combn(20, 8)
View(all_combs)
View(all_combs)
all_combs[,1]
knitr::opts_chunk$set(
dev.args = list(bg = 'transparent'),
fig.align = "center",
cache = FALSE
)
# install.packages("penalized")
N <- 20; m <- 8
all_combs <- combn(20, 8)
all_combs[,2]
all_combs[,3]
swaps <- sample(c(0, 1), N/2, replace = TRUE)
sample(c(0, 1), N/2, replace = TRUE)
set.seed(190933)
mu <- 1.75
x <- rnorm(30)
y <- rnorm(30, mu, 2)
Get20TrimmedMean <- function(x,y) mean(x, trim = 0.2) - mean(y, trim = 0.2)
t_obs <- Get20TrimmedMean(x,y)
t_obs
sample(c(0, 1), N/2, replace = TRUE)
c(rbind(x, y))
#sample(c(0, 1), N/2, replace = TRUE)
c(rbind(x, y))
#sample(c(0, 1), N/2, replace = TRUE)
z<-c(rbind(x, y))
#sample(c(0, 1), N/2, replace = TRUE)
z<-c(rbind(x, y))
seq(1, 60, by = 2)
rbind(x, y)
c(rbind(x, y))
B <- 1000
1 - prod(1 - 1:(B - 1)/(2^length(x)))
ï¼Ÿprod
?prod
library(penalized)
data(nki70)
View(nki70)
sample(c(0, 1), length(x)*(B*3), replace = TRUE)
dim(swaps) <- c(B*3, length(x))
swaps = sample(c(0, 1), length(x)*(B*3), replace = TRUE)
dim(swaps) <- c(B*3, length(x))
unique(swaps)[1:B, ]
View(swaps)
(swaps)[1:B, ]
unique(swaps)[1:B, ]
unique(swaps)
len(swaps)
dim(swaps)
dim(unique(swaps)[1:B, ])
dim(unique(swaps))
?unique
t.test(WISP1~ER, data=nki70)
